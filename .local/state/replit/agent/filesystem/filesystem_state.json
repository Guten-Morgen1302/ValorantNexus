{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Nyxxus E-Sports Tournament Portal\n\n## Overview\n\nThis is a full-stack Valorant-themed tournament portal for Nyxxus E-Sports' \"Spike Rush Cup 2.0\". The application manages team registration, payment verification, and tournament administration. Built with a modern web stack, it features user authentication, team management, and admin controls for tournament oversight.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **Styling**: TailwindCSS with custom Valorant-themed design system including glass morphism effects and gaming aesthetics\n- **UI Components**: Radix UI primitives with shadcn/ui component library for consistent, accessible interface elements\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful endpoints with consistent error handling and response formatting\n- **Middleware Stack**: Rate limiting, session management, file upload handling, and authentication middleware\n- **Session Management**: Cookie-based sessions using cookie-session middleware\n\n### Data Storage Solutions\n- **Database**: SQLite with better-sqlite3 driver for local development and deployment\n- **ORM**: Drizzle ORM for type-safe database operations and schema management\n- **Schema**: Shared TypeScript schema definitions between client and server\n- **File Storage**: Local file system for payment proof uploads with authentication-protected access\n\n### Authentication and Authorization\n- **User Authentication**: Email/password-based registration and login with bcrypt password hashing\n- **Admin Authentication**: Simple hardcoded admin credentials (username: \"callmeson\", password: \"callmeson\")\n- **Session Security**: HTTP-only cookies with configurable session duration\n- **Route Protection**: Middleware-based authentication guards for protected routes\n- **Role-Based Access**: Separate user and admin authentication flows with different access levels\n\n### External Dependencies\n\n- **Database**: Uses Neon Database serverless PostgreSQL for production (configured but currently using SQLite)\n- **UI Framework**: Radix UI for accessible component primitives\n- **Validation**: Zod for runtime type validation and schema definition\n- **File Handling**: Multer for multipart form data and file upload processing\n- **Development Tools**: Replit-specific plugins for development environment integration\n- **Build System**: Vite with React plugin and ESBuild for production builds\n\nThe application follows a monorepo structure with shared TypeScript definitions, allowing for type safety across the full stack. The architecture prioritizes developer experience with hot reloading, TypeScript strict mode, and comprehensive error handling throughout the application layers.","size_bytes":3134},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        'valorant-red': 'var(--valorant-red)',\n        'valorant-navy': 'var(--valorant-navy)',\n        'valorant-off-white': 'var(--valorant-off-white)',\n        'valorant-charcoal': 'var(--valorant-charcoal)',\n        'valorant-mint': 'var(--valorant-mint)',\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        teko: [\"var(--font-teko)\"],\n        rajdhani: [\"var(--font-rajdhani)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"glitch-1\": {\n          \"0%, 14%, 15%, 49%, 50%, 99%, 100%\": { \n            transform: \"translate(0)\" \n          },\n          \"15%, 49%\": { \n            transform: \"translate(-2px, 2px)\" \n          }\n        },\n        \"glitch-2\": {\n          \"0%, 20%, 21%, 62%, 63%, 99%, 100%\": { \n            transform: \"translate(0)\" \n          },\n          \"21%, 62%\": { \n            transform: \"translate(2px, -2px)\" \n          }\n        },\n        \"float\": {\n          \"0%, 100%\": { \n            transform: \"translateY(0px)\" \n          },\n          \"50%\": { \n            transform: \"translateY(-10px)\" \n          }\n        },\n        \"pulse-glow\": {\n          \"from\": { \n            boxShadow: \"0 0 20px rgba(255, 70, 85, 0.4)\" \n          },\n          \"to\": { \n            boxShadow: \"0 0 30px rgba(255, 70, 85, 0.8), 0 0 40px rgba(154, 247, 215, 0.3)\" \n          }\n        }\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"glitch-1\": \"glitch-1 0.5s infinite\",\n        \"glitch-2\": \"glitch-2 0.5s infinite\",\n        \"float\": \"float 3s ease-in-out infinite\",\n        \"pulse-glow\": \"pulse-glow 2s ease-in-out infinite alternate\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4193},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n\n// Initialize database with settings and default admin\nexport async function initializeDatabase() {\n  try {\n    // Insert default settings\n    await db.insert(schema.settings).values({\n      key: \"registration_open\",\n      value: \"true\"\n    }).onConflictDoNothing();\n    \n    // Create default admin if not exists\n    const bcrypt = await import('bcrypt');\n    const defaultAdminHash = await bcrypt.hash('admin123!', 10);\n    \n    await db.insert(schema.admins).values({\n      email: 'admin@tournament.com',\n      passwordHash: defaultAdminHash\n    }).onConflictDoNothing();\n    \n    console.log('✓ Database initialized with default admin (admin@tournament.com / admin123!)');\n  } catch (error) {\n    console.log(\"Database already initialized\");\n  }\n}\n","size_bytes":1238},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import express, { type Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport session from \"express-session\";\nimport connectPgSimple from \"connect-pg-simple\";\n\n// Extend session interface to include our custom properties\ndeclare module 'express-session' {\n  interface SessionData {\n    userId?: number;\n    adminId?: number;\n  }\n}\nimport rateLimit from \"express-rate-limit\";\nimport { storage } from \"./storage\";\nimport { initializeDatabase } from \"./db\";\nimport { userAuth, adminAuth, hashPassword, comparePassword } from \"./middleware/auth\";\nimport { upload } from \"./middleware/upload\";\nimport { insertUserSchema, loginSchema, insertTeamSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport path from \"path\";\nimport fs from \"fs\";\n\nconst registerLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // limit each IP to 5 requests per windowMs\n  message: { message: \"Too many registration attempts, please try again later\" }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Trust proxy for rate limiting\n  app.set('trust proxy', 1);\n  \n  // Initialize database\n  await initializeDatabase();\n\n  // Session middleware with PostgreSQL store\n  const PostgreSqlStore = connectPgSimple(session);\n  \n  app.use(session({\n    store: new PostgreSqlStore({\n      conString: process.env.DATABASE_URL,\n      tableName: 'sessions',\n      createTableIfMissing: false // We already have the table\n    }),\n    name: 'tournament-session',\n    secret: process.env.SESSION_SECRET || 'fallback-secret-for-dev-only',\n    resave: false,\n    saveUninitialized: false,\n    rolling: true, // Reset expiry on activity\n    cookie: {\n      secure: process.env.NODE_ENV === 'production', // HTTPS only in production\n      httpOnly: true, // Prevent XSS\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n      sameSite: 'lax' // CSRF protection\n    }\n  }));\n\n  // Serve uploaded files - allow team leaders and admins to view payment proofs\n  app.use('/uploads', async (req, res, next) => {\n    try {\n      const isAdmin = req.session?.adminId;\n      const userId = req.session?.userId;\n      \n      if (!isAdmin && !userId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      // If not admin, check if user owns the file they're trying to access\n      if (!isAdmin && userId) {\n        const filename = req.url.split('/').pop();\n        const team = await storage.getTeamByLeaderId(userId);\n        \n        if (!team || team.paymentProofPath !== filename) {\n          return res.status(403).json({ message: \"Access denied\" });\n        }\n      }\n      \n      next();\n    } catch (error) {\n      console.error('File access error:', error);\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n  app.use('/uploads', express.static(path.join(process.cwd(), 'server', 'uploads')));\n\n  // Auth routes\n  app.post('/api/auth/signup', registerLimiter, async (req, res) => {\n    try {\n      const validatedData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(validatedData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists with this email\" });\n      }\n\n      const passwordHash = await hashPassword(validatedData.password);\n      const user = await storage.createUser({\n        name: validatedData.name,\n        email: validatedData.email,\n        discordId: validatedData.discordId,\n        passwordHash,\n      });\n\n      req.session.userId = user.id;\n      res.json({ user: { id: user.id, name: user.name, email: user.email, discordId: user.discordId } });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: error.errors[0].message });\n      }\n      console.error(\"Signup error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n\n      const isValidPassword = await comparePassword(password, user.passwordHash);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n\n      req.session.userId = user.id;\n      res.json({ user: { id: user.id, name: user.name, email: user.email, discordId: user.discordId } });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: error.errors[0].message });\n      }\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post('/api/auth/logout', (req, res) => {\n    req.session.destroy((err) => {\n      if (err) console.error('Session destroy error:', err);\n    });\n    res.json({ message: \"Logged out successfully\" });\n  });\n\n  app.get('/api/auth/user', userAuth, (req, res) => {\n    res.json({ user: { id: req.user.id, name: req.user.name, email: req.user.email, discordId: req.user.discordId } });\n  });\n\n  // Team routes\n  app.post('/api/teams/register', userAuth, upload.single('paymentProof'), async (req, res) => {\n    try {\n      // Check if registration is open\n      const registrationOpen = await storage.getSetting(\"registration_open\");\n      if (registrationOpen !== \"true\") {\n        return res.status(400).json({ message: \"Registration is currently closed\" });\n      }\n\n      // Check if user already has a team\n      const existingTeam = await storage.getTeamByLeaderId(req.userId!);\n      if (existingTeam) {\n        return res.status(400).json({ message: \"You have already registered a team\" });\n      }\n\n      const { teamName, members } = insertTeamSchema.parse({\n        teamName: req.body.teamName,\n        members: JSON.parse(req.body.members || '[]'),\n      });\n\n      const team = await storage.createTeam({\n        teamName,\n        leaderId: req.userId!,\n        membersJson: JSON.stringify(members),\n        paymentProofPath: req.file?.filename || null,\n        status: \"pending\",\n        rejectionReason: null,\n      });\n\n      res.json({ team, message: \"Team registered successfully! Awaiting payment approval.\" });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: error.errors[0].message });\n      }\n      console.error(\"Team registration error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get('/api/teams/my-team', userAuth, async (req, res) => {\n    try {\n      const team = await storage.getTeamByLeaderId(req.userId!);\n      if (!team) {\n        return res.status(404).json({ message: \"No team found\" });\n      }\n\n      res.json({\n        ...team,\n        members: JSON.parse(team.membersJson),\n      });\n    } catch (error) {\n      console.error(\"Get team error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get('/api/settings/registration-open', async (req, res) => {\n    try {\n      const registrationOpen = await storage.getSetting(\"registration_open\");\n      res.json({ registrationOpen: registrationOpen === \"true\" });\n    } catch (error) {\n      console.error(\"Get settings error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Admin routes - secure admin authentication\n  app.post('/api/admin/login', async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).json({ message: \"Username and password are required\" });\n      }\n      \n      // Treat username as email for admin login\n      const admin = await storage.getAdminByEmail(username);\n      if (!admin) {\n        return res.status(401).json({ message: \"Invalid admin credentials\" });\n      }\n\n      const isValidPassword = await comparePassword(password, admin.passwordHash);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid admin credentials\" });\n      }\n\n      req.session.adminId = admin.id;\n      res.json({ message: \"Admin logged in successfully\", admin: { id: admin.id, email: admin.email } });\n    } catch (error) {\n      console.error(\"Admin login error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post('/api/admin/logout', (req, res) => {\n    if (req.session.adminId) {\n      delete req.session.adminId;\n    }\n    res.json({ message: \"Admin logged out successfully\" });\n  });\n\n  app.get('/api/admin/check', adminAuth, (req, res) => {\n    res.json({ isAdmin: true });\n  });\n\n  app.get('/api/admin/teams', adminAuth, async (req, res) => {\n    try {\n      const teams = await storage.getAllTeams();\n      res.json({ teams });\n    } catch (error) {\n      console.error(\"Get admin teams error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post('/api/admin/teams/:id/approve', adminAuth, async (req, res) => {\n    try {\n      const teamId = parseInt(req.params.id);\n      await storage.updateTeamStatus(teamId, \"approved\");\n      res.json({ message: \"Team approved successfully\" });\n    } catch (error) {\n      console.error(\"Approve team error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post('/api/admin/teams/:id/reject', adminAuth, async (req, res) => {\n    try {\n      const teamId = parseInt(req.params.id);\n      const { reason } = req.body;\n      await storage.updateTeamStatus(teamId, \"rejected\", reason);\n      res.json({ message: \"Team rejected successfully\" });\n    } catch (error) {\n      console.error(\"Reject team error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post('/api/admin/settings/registration-toggle', adminAuth, async (req, res) => {\n    try {\n      const { registrationOpen } = req.body;\n      await storage.setSetting(\"registration_open\", registrationOpen ? \"true\" : \"false\");\n      res.json({ message: \"Registration status updated\", registrationOpen });\n    } catch (error) {\n      console.error(\"Toggle registration error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":10526},"server/storage.ts":{"content":"import { users, teams, settings, admins, type User, type InsertUser, type Admin, type Team, type TeamWithUser } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: number): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: { name: string; email: string; discordId: string; passwordHash: string }): Promise<User>;\n  \n  // Admin operations\n  getAdmin(id: number): Promise<Admin | undefined>;\n  getAdminByEmail(email: string): Promise<Admin | undefined>;\n  createAdmin(admin: { email: string; passwordHash: string }): Promise<Admin>;\n  \n  // Team operations\n  createTeam(team: Omit<Team, 'id' | 'createdAt'>): Promise<Team>;\n  getTeamByLeaderId(leaderId: number): Promise<Team | undefined>;\n  getAllTeams(): Promise<TeamWithUser[]>;\n  updateTeamStatus(teamId: number, status: string, rejectionReason?: string): Promise<void>;\n  updateTeamPaymentProof(teamId: number, paymentProofPath: string): Promise<void>;\n  \n  // Settings operations\n  getSetting(key: string): Promise<string | undefined>;\n  setSetting(key: string, value: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(userData: { name: string; email: string; discordId: string; passwordHash: string }): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values({\n        name: userData.name,\n        email: userData.email,\n        discordId: userData.discordId,\n        passwordHash: userData.passwordHash,\n      })\n      .returning();\n    return user;\n  }\n\n  async createTeam(teamData: Omit<Team, 'id' | 'createdAt'>): Promise<Team> {\n    const [team] = await db\n      .insert(teams)\n      .values(teamData)\n      .returning();\n    return team;\n  }\n\n  async getTeamByLeaderId(leaderId: number): Promise<Team | undefined> {\n    const [team] = await db.select().from(teams).where(eq(teams.leaderId, leaderId));\n    return team;\n  }\n\n  async getAllTeams(): Promise<TeamWithUser[]> {\n    const result = await db\n      .select({\n        team: teams,\n        leader: users,\n      })\n      .from(teams)\n      .innerJoin(users, eq(teams.leaderId, users.id))\n      .orderBy(desc(teams.createdAt));\n\n    return result.map(({ team, leader }) => ({\n      ...team,\n      leader,\n      members: JSON.parse(team.membersJson),\n    }));\n  }\n\n  async updateTeamStatus(teamId: number, status: string, rejectionReason?: string): Promise<void> {\n    await db\n      .update(teams)\n      .set({ status, rejectionReason })\n      .where(eq(teams.id, teamId));\n  }\n\n  async updateTeamPaymentProof(teamId: number, paymentProofPath: string): Promise<void> {\n    await db\n      .update(teams)\n      .set({ paymentProofPath })\n      .where(eq(teams.id, teamId));\n  }\n\n  async getSetting(key: string): Promise<string | undefined> {\n    const [setting] = await db.select().from(settings).where(eq(settings.key, key));\n    return setting?.value;\n  }\n\n  async setSetting(key: string, value: string): Promise<void> {\n    await db\n      .insert(settings)\n      .values({ key, value })\n      .onConflictDoUpdate({\n        target: settings.key,\n        set: { value },\n      });\n  }\n\n  async getAdmin(id: number): Promise<Admin | undefined> {\n    const [admin] = await db.select().from(admins).where(eq(admins.id, id));\n    return admin;\n  }\n\n  async getAdminByEmail(email: string): Promise<Admin | undefined> {\n    const [admin] = await db.select().from(admins).where(eq(admins.email, email));\n    return admin;\n  }\n\n  async createAdmin(adminData: { email: string; passwordHash: string }): Promise<Admin> {\n    const [admin] = await db\n      .insert(admins)\n      .values(adminData)\n      .returning();\n    return admin;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":4141},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, varchar, text, serial, timestamp, integer, index, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for PostgreSQL\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  name: varchar(\"name\").notNull(),\n  email: varchar(\"email\").notNull().unique(),\n  discordId: varchar(\"discord_id\").notNull(),\n  passwordHash: varchar(\"password_hash\").notNull(),\n});\n\nexport const admins = pgTable(\"admins\", {\n  id: serial(\"id\").primaryKey(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  email: varchar(\"email\").notNull().unique(),\n  passwordHash: varchar(\"password_hash\").notNull(),\n});\n\nexport const settings = pgTable(\"settings\", {\n  key: varchar(\"key\").primaryKey(),\n  value: varchar(\"value\").notNull(),\n});\n\nexport const teams = pgTable(\"teams\", {\n  id: serial(\"id\").primaryKey(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  teamName: varchar(\"team_name\").notNull(),\n  leaderId: integer(\"leader_id\").notNull().references(() => users.id),\n  membersJson: text(\"members_json\").notNull(),\n  paymentProofPath: varchar(\"payment_proof_path\"),\n  status: varchar(\"status\").notNull().default(\"pending\"), // pending | approved | rejected\n  rejectionReason: text(\"rejection_reason\"),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  passwordHash: true,\n}).extend({\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nexport const insertTeamSchema = createInsertSchema(teams).omit({\n  id: true,\n  createdAt: true,\n  leaderId: true,\n  status: true,\n  rejectionReason: true,\n}).extend({\n  members: z.array(z.object({\n    ign: z.string().min(1, \"IGN is required\"),\n    discord: z.string().optional(),\n  })).min(1, \"At least one member is required\").max(5, \"Maximum 5 members allowed\"),\n});\n\nexport const loginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Admin = typeof admins.$inferSelect;\nexport type Team = typeof teams.$inferSelect;\nexport type InsertTeam = z.infer<typeof insertTeamSchema>;\nexport type LoginData = z.infer<typeof loginSchema>;\n\nexport type TeamWithUser = Team & {\n  leader: User;\n  members: Array<{ ign: string; discord?: string }>;\n};\n","size_bytes":2779},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Login from \"@/pages/Login\";\nimport Signup from \"@/pages/Signup\";\nimport Home from \"@/pages/Home\";\nimport Register from \"@/pages/Register\";\nimport Rules from \"@/pages/Rules\";\nimport Profile from \"@/pages/Profile\";\nimport AdminLogin from \"@/pages/admin/AdminLogin\";\nimport Dashboard from \"@/pages/admin/Dashboard\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-valorant-navy\">\n        <div className=\"glass-morphism rounded-2xl p-8\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-valorant-red mx-auto\"></div>\n          <p className=\"text-valorant-off-white mt-4 font-teko text-xl\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Login} />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/signup\" component={Signup} />\n          <Route path=\"/admin\" component={AdminLogin} />\n        </>\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/register\" component={Register} />\n          <Route path=\"/rules\" component={Rules} />\n          <Route path=\"/profile\" component={Profile} />\n        </>\n      )}\n      <Route path=\"/admin/login\" component={AdminLogin} />\n      <Route path=\"/admin/dashboard\" component={Dashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2088},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Teko:wght@300;400;500;600;700&family=Rajdhani:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 15%);\n  --foreground: hsl(36, 15%, 91%);\n  --card: hsl(210, 33%, 12%);\n  --card-foreground: hsl(36, 15%, 91%);\n  --popover: hsl(210, 40%, 15%);\n  --popover-foreground: hsl(36, 15%, 91%);\n  --primary: hsl(353, 100%, 64%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 25%, 7.8431%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 1.9608%, 90%);\n  --muted-foreground: hsl(210, 25%, 7.8431%);\n  --accent: hsl(169, 68%, 82%);\n  --accent-foreground: hsl(210, 40%, 15%);\n  --destructive: hsl(353, 100%, 64%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 15%, 25%);\n  --input: hsl(210, 33%, 12%);\n  --ring: hsl(353, 100%, 64%);\n  \n  --valorant-red: hsl(353, 100%, 64%);\n  --valorant-navy: hsl(210, 40%, 15%);\n  --valorant-off-white: hsl(36, 15%, 91%);\n  --valorant-charcoal: hsl(210, 33%, 12%);\n  --valorant-mint: hsl(169, 68%, 82%);\n  \n  --font-teko: 'Teko', sans-serif;\n  --font-rajdhani: 'Rajdhani', sans-serif;\n  \n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(210, 40%, 15%);\n  --foreground: hsl(36, 15%, 91%);\n  --card: hsl(210, 33%, 12%);\n  --card-foreground: hsl(36, 15%, 91%);\n  --popover: hsl(210, 40%, 15%);\n  --popover-foreground: hsl(36, 15%, 91%);\n  --primary: hsl(353, 100%, 64%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(169, 68%, 82%);\n  --accent-foreground: hsl(210, 40%, 15%);\n  --destructive: hsl(353, 100%, 64%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 15%, 25%);\n  --input: hsl(210, 33%, 12%);\n  --ring: hsl(353, 100%, 64%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-rajdhani antialiased;\n    background: var(--valorant-navy);\n    color: var(--valorant-off-white);\n    font-family: var(--font-rajdhani);\n  }\n}\n\n@layer components {\n  .glass-morphism {\n    background: rgba(15, 25, 35, 0.8);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 70, 85, 0.2);\n  }\n  \n  .glass-morphism-light {\n    background: rgba(236, 232, 225, 0.1);\n    backdrop-filter: blur(15px);\n    border: 1px solid rgba(154, 247, 215, 0.3);\n  }\n  \n  .skew-button {\n    transform: skewX(-10deg);\n    transition: all 0.3s ease;\n  }\n  \n  .skew-button:hover {\n    transform: skewX(-5deg) translateY(-2px);\n    box-shadow: 0 10px 25px rgba(255, 70, 85, 0.4);\n  }\n  \n  .glitch-text {\n    position: relative;\n    color: var(--valorant-red);\n    font-weight: bold;\n  }\n  \n  .glitch-text::before,\n  .glitch-text::after {\n    content: attr(data-text);\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n  }\n  \n  .glitch-text::before {\n    animation: glitch-1 0.5s infinite;\n    color: var(--valorant-mint);\n    z-index: -1;\n  }\n  \n  .glitch-text::after {\n    animation: glitch-2 0.5s infinite;\n    color: var(--valorant-off-white);\n    z-index: -2;\n  }\n  \n  .hexagon-pattern {\n    background-image: \n      radial-gradient(circle at 25% 25%, rgba(154, 247, 215, 0.1) 2px, transparent 2px),\n      radial-gradient(circle at 75% 75%, rgba(255, 70, 85, 0.1) 2px, transparent 2px);\n    background-size: 60px 60px;\n    background-position: 0 0, 30px 30px;\n  }\n  \n  .diagonal-section {\n    clip-path: polygon(0 0, 100% 10%, 100% 100%, 0 90%);\n  }\n  \n  .card-hover {\n    transition: all 0.3s ease;\n  }\n  \n  .card-hover:hover {\n    transform: translateY(-5px) rotateX(5deg);\n    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4);\n  }\n  \n  .nav-glass {\n    background: rgba(15, 25, 35, 0.95);\n    backdrop-filter: blur(20px);\n    border-bottom: 1px solid rgba(255, 70, 85, 0.3);\n  }\n  \n  .status-pending { \n    background: linear-gradient(45deg, #FFA500, #FF8C00); \n  }\n  \n  .status-approved { \n    background: linear-gradient(45deg, #9AF7D7, #00FF7F); \n  }\n  \n  .status-rejected { \n    background: linear-gradient(45deg, #FF4655, #FF1744); \n  }\n}\n\n@layer utilities {\n  .font-teko {\n    font-family: var(--font-teko);\n  }\n  \n  .font-rajdhani {\n    font-family: var(--font-rajdhani);\n  }\n  \n  .text-valorant-red {\n    color: var(--valorant-red);\n  }\n  \n  .text-valorant-navy {\n    color: var(--valorant-navy);\n  }\n  \n  .text-valorant-off-white {\n    color: var(--valorant-off-white);\n  }\n  \n  .text-valorant-charcoal {\n    color: var(--valorant-charcoal);\n  }\n  \n  .text-valorant-mint {\n    color: var(--valorant-mint);\n  }\n  \n  .bg-valorant-red {\n    background-color: var(--valorant-red);\n  }\n  \n  .bg-valorant-navy {\n    background-color: var(--valorant-navy);\n  }\n  \n  .bg-valorant-off-white {\n    background-color: var(--valorant-off-white);\n  }\n  \n  .bg-valorant-charcoal {\n    background-color: var(--valorant-charcoal);\n  }\n  \n  .bg-valorant-mint {\n    background-color: var(--valorant-mint);\n  }\n  \n  .border-valorant-red {\n    border-color: var(--valorant-red);\n  }\n  \n  .border-valorant-mint {\n    border-color: var(--valorant-mint);\n  }\n}\n\n@keyframes glitch-1 {\n  0%, 14%, 15%, 49%, 50%, 99%, 100% { \n    transform: translate(0); \n  }\n  15%, 49% { \n    transform: translate(-2px, 2px); \n  }\n}\n\n@keyframes glitch-2 {\n  0%, 20%, 21%, 62%, 63%, 99%, 100% { \n    transform: translate(0); \n  }\n  21%, 62% { \n    transform: translate(2px, -2px); \n  }\n}\n\n@keyframes float {\n  0%, 100% { \n    transform: translateY(0px); \n  }\n  50% { \n    transform: translateY(-10px); \n  }\n}\n\n@keyframes pulse-glow {\n  from { \n    box-shadow: 0 0 20px rgba(255, 70, 85, 0.4); \n  }\n  to { \n    box-shadow: 0 0 30px rgba(255, 70, 85, 0.8), 0 0 40px rgba(154, 247, 215, 0.3); \n  }\n}\n\n.animate-float {\n  animation: float 3s ease-in-out infinite;\n}\n\n.animate-pulse-glow {\n  animation: pulse-glow 2s ease-in-out infinite alternate;\n}\n","size_bytes":6011},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/middleware/auth.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\nimport bcrypt from \"bcrypt\";\nimport { storage } from \"../storage\";\n\ndeclare global {\n  namespace Express {\n    interface Request {\n      userId?: number;\n      user?: any;\n      adminId?: number;\n      admin?: any;\n    }\n  }\n}\n\nexport async function userAuth(req: Request, res: Response, next: NextFunction) {\n  const userId = req.session.userId;\n  \n  if (!userId) {\n    return res.status(401).json({ message: \"Authentication required\" });\n  }\n\n  const user = await storage.getUser(userId);\n  if (!user) {\n    return res.status(401).json({ message: \"User not found\" });\n  }\n\n  req.userId = userId;\n  req.user = user;\n  next();\n}\n\nexport async function adminAuth(req: Request, res: Response, next: NextFunction) {\n  const adminId = req.session.adminId;\n  \n  if (!adminId) {\n    return res.status(401).json({ message: \"Admin authentication required\" });\n  }\n\n  const admin = await storage.getAdmin(adminId);\n  if (!admin) {\n    return res.status(401).json({ message: \"Admin not found\" });\n  }\n\n  req.adminId = adminId;\n  req.admin = admin;\n  next();\n}\n\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, 10);\n}\n\nexport async function comparePassword(password: string, hash: string): Promise<boolean> {\n  return bcrypt.compare(password, hash);\n}\n","size_bytes":1354},"server/middleware/upload.ts":{"content":"import multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\n\n// Ensure uploads directory exists\nconst uploadsDir = path.join(process.cwd(), \"server\", \"uploads\");\nif (!fs.existsSync(uploadsDir)) {\n  fs.mkdirSync(uploadsDir, { recursive: true });\n}\n\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, uploadsDir);\n  },\n  filename: function (req, file, cb) {\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));\n  }\n});\n\nconst fileFilter = (req: any, file: any, cb: any) => {\n  // Accept only images and PDFs\n  if (file.mimetype.startsWith('image/') || file.mimetype === 'application/pdf') {\n    cb(null, true);\n  } else {\n    cb(new Error('Only image files (PNG, JPG, JPEG) and PDF files are allowed'), false);\n  }\n};\n\nexport const upload = multer({\n  storage: storage,\n  limits: {\n    fileSize: 5 * 1024 * 1024, // 5MB limit\n  },\n  fileFilter: fileFilter,\n});\n","size_bytes":1024},"client/src/components/GlitchText.tsx":{"content":"interface GlitchTextProps {\n  text: string;\n  className?: string;\n}\n\nexport default function GlitchText({ text, className = \"\" }: GlitchTextProps) {\n  return (\n    <span \n      className={`glitch-text ${className}`} \n      data-text={text}\n    >\n      {text}\n    </span>\n  );\n}\n","size_bytes":278},"client/src/components/Interactive3DLogo.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\nimport * as THREE from 'three';\n\ninterface Interactive3DLogoProps {\n  text: string;\n  size?: number;\n  hover?: boolean;\n}\n\nexport default function Interactive3DLogo({ text, size = 1, hover = false }: Interactive3DLogoProps) {\n  const mountRef = useRef<HTMLDivElement>(null);\n  const rendererRef = useRef<THREE.WebGLRenderer | null>(null);\n  const sceneRef = useRef<THREE.Scene | null>(null);\n  const animationFrameRef = useRef<number | null>(null);\n  const [isHovered, setIsHovered] = useState(false);\n\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    sceneRef.current = scene;\n\n    // Camera\n    const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);\n    camera.position.z = 5;\n\n    // Renderer\n    const renderer = new THREE.WebGLRenderer({ \n      alpha: true, \n      antialias: true,\n      powerPreference: \"high-performance\"\n    });\n    const containerSize = 200 * size;\n    renderer.setSize(containerSize, containerSize);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    mountRef.current.appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n\n    // Create 3D text geometry (simplified as geometric shapes)\n    const logoGroup = new THREE.Group();\n\n    // Create letter-like shapes for \"NYXXUS\"\n    const shapes: THREE.Mesh[] = [];\n    \n    // Create geometric representation\n    const letterWidth = 0.8;\n    const letterSpacing = 1.2;\n    const totalWidth = text.length * letterSpacing;\n    const startX = -totalWidth / 2;\n\n    for (let i = 0; i < text.length; i++) {\n      const letterGroup = new THREE.Group();\n      \n      // Main letter body\n      const letterGeometry = new THREE.BoxGeometry(letterWidth, 2, 0.2);\n      const letterMaterial = new THREE.MeshPhongMaterial({ \n        color: 0xFF4655,\n        shininess: 100,\n        transparent: true,\n        opacity: 0.9\n      });\n      const letterMesh = new THREE.Mesh(letterGeometry, letterMaterial);\n      \n      // Add glow effect\n      const glowGeometry = new THREE.BoxGeometry(letterWidth * 1.1, 2.1, 0.3);\n      const glowMaterial = new THREE.MeshBasicMaterial({\n        color: 0x9AF7D7,\n        transparent: true,\n        opacity: 0.3,\n        side: THREE.BackSide\n      });\n      const glowMesh = new THREE.Mesh(glowGeometry, glowMaterial);\n      \n      letterGroup.add(glowMesh);\n      letterGroup.add(letterMesh);\n      \n      letterGroup.position.x = startX + i * letterSpacing;\n      logoGroup.add(letterGroup);\n      shapes.push(letterMesh);\n    }\n\n    scene.add(logoGroup);\n\n    // Lighting\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.4);\n    scene.add(ambientLight);\n\n    const directionalLight = new THREE.DirectionalLight(0xFF4655, 1);\n    directionalLight.position.set(5, 5, 5);\n    scene.add(directionalLight);\n\n    const accentLight = new THREE.DirectionalLight(0x9AF7D7, 0.8);\n    accentLight.position.set(-5, -5, 5);\n    scene.add(accentLight);\n\n    // Particle system around logo\n    const particleCount = 100;\n    const particlesGeometry = new THREE.BufferGeometry();\n    const particlePositions = new Float32Array(particleCount * 3);\n    const particleColors = new Float32Array(particleCount * 3);\n\n    for (let i = 0; i < particleCount; i++) {\n      const i3 = i * 3;\n      \n      // Circular distribution around logo\n      const radius = 3 + Math.random() * 2;\n      const angle = (i / particleCount) * Math.PI * 2 + Math.random() * 0.5;\n      const height = (Math.random() - 0.5) * 4;\n      \n      particlePositions[i3] = Math.cos(angle) * radius;\n      particlePositions[i3 + 1] = height;\n      particlePositions[i3 + 2] = Math.sin(angle) * radius;\n\n      // Valorant colors\n      const color = new THREE.Color(Math.random() > 0.5 ? 0xFF4655 : 0x9AF7D7);\n      particleColors[i3] = color.r;\n      particleColors[i3 + 1] = color.g;\n      particleColors[i3 + 2] = color.b;\n    }\n\n    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(particlePositions, 3));\n    particlesGeometry.setAttribute('color', new THREE.BufferAttribute(particleColors, 3));\n\n    const particlesMaterial = new THREE.PointsMaterial({\n      size: 0.05,\n      vertexColors: true,\n      transparent: true,\n      opacity: 0.8,\n      blending: THREE.AdditiveBlending\n    });\n\n    const particleSystem = new THREE.Points(particlesGeometry, particlesMaterial);\n    scene.add(particleSystem);\n\n    // Animation\n    let time = 0;\n    const animate = () => {\n      time += 0.016;\n      \n      // Rotate logo group\n      logoGroup.rotation.y = Math.sin(time * 0.5) * 0.1;\n      logoGroup.rotation.x = Math.cos(time * 0.3) * 0.05;\n      \n      // Individual letter animations\n      shapes.forEach((shape, index) => {\n        const offset = index * 0.3;\n        shape.rotation.z = Math.sin(time + offset) * 0.1;\n        shape.position.y = Math.sin(time * 2 + offset) * 0.1;\n        \n        // Hover effects\n        if (isHovered || hover) {\n          shape.rotation.y = Math.sin(time * 2 + offset) * 0.2;\n          const material = shape.material as THREE.MeshPhongMaterial;\n          material.emissive.setHex(0x330011);\n        } else {\n          const material = shape.material as THREE.MeshPhongMaterial;\n          material.emissive.setHex(0x000000);\n        }\n      });\n\n      // Animate particles\n      const positions = particlesGeometry.attributes.position.array as Float32Array;\n      for (let i = 0; i < particleCount; i++) {\n        const i3 = i * 3;\n        const originalY = positions[i3 + 1];\n        positions[i3 + 1] = originalY + Math.sin(time * 2 + i * 0.1) * 0.02;\n        \n        // Rotate particles around logo\n        const angle = time * 0.5 + (i / particleCount) * Math.PI * 2;\n        const radius = 3 + Math.sin(time + i * 0.1) * 0.5;\n        positions[i3] = Math.cos(angle) * radius;\n        positions[i3 + 2] = Math.sin(angle) * radius;\n      }\n      particlesGeometry.attributes.position.needsUpdate = true;\n\n      // Camera subtle movement\n      camera.position.x = Math.sin(time * 0.2) * 0.1;\n      camera.position.y = Math.cos(time * 0.15) * 0.1;\n      camera.lookAt(0, 0, 0);\n\n      renderer.render(scene, camera);\n      animationFrameRef.current = requestAnimationFrame(animate);\n    };\n\n    animate();\n\n    // Cleanup\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      \n      if (mountRef.current && renderer.domElement) {\n        mountRef.current.removeChild(renderer.domElement);\n      }\n      \n      renderer.dispose();\n      scene.clear();\n    };\n  }, [text, size, hover, isHovered]);\n\n  return (\n    <div\n      ref={mountRef}\n      className=\"relative inline-block cursor-pointer\"\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n      style={{ width: 200 * size, height: 200 * size }}\n    />\n  );\n}","size_bytes":6912},"client/src/components/Layout.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function Layout({ children }: LayoutProps) {\n  const { user } = useAuth();\n  const [location] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const logoutMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/auth/logout\"),\n    onSuccess: () => {\n      queryClient.clear();\n      toast({\n        title: \"Logged out\",\n        description: \"You have been logged out successfully\",\n      });\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-valorant-navy overflow-x-hidden\">\n      {/* Background Effects */}\n      <div className=\"fixed inset-0 hexagon-pattern opacity-30 pointer-events-none\"></div>\n      <div className=\"fixed inset-0 bg-gradient-to-br from-valorant-navy via-valorant-charcoal to-valorant-navy pointer-events-none\"></div>\n      \n      {/* Navigation */}\n      <nav className=\"nav-glass fixed top-0 left-0 right-0 z-50\">\n        <div className=\"container mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <Link href=\"/\" className=\"flex items-center space-x-4\">\n              <div className=\"w-10 h-10 bg-valorant-red rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-gamepad text-white text-xl\"></i>\n              </div>\n              <div>\n                <h1 className=\"font-teko text-2xl font-bold text-valorant-red\">NYXXUS E-SPORTS</h1>\n                <p className=\"text-xs text-valorant-mint\">Tournament Portal</p>\n              </div>\n            </Link>\n            \n            <div className=\"hidden md:flex items-center space-x-6\">\n              <Link \n                href=\"/\" \n                className={`hover:text-valorant-red transition-colors ${location === '/' ? 'text-valorant-red' : ''}`}\n              >\n                Home\n              </Link>\n              <Link \n                href=\"/register\" \n                className={`hover:text-valorant-red transition-colors ${location === '/register' ? 'text-valorant-red' : ''}`}\n              >\n                Register Team\n              </Link>\n              <Link \n                href=\"/rules\" \n                className={`hover:text-valorant-red transition-colors ${location === '/rules' ? 'text-valorant-red' : ''}`}\n              >\n                Rules\n              </Link>\n              <Link \n                href=\"/profile\" \n                className={`hover:text-valorant-red transition-colors ${location === '/profile' ? 'text-valorant-red' : ''}`}\n              >\n                Profile\n              </Link>\n            </div>\n            \n            {user && (\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"hidden md:block\">\n                  <span className=\"text-sm\" data-testid=\"user-name\">{user.name}</span>\n                  <span className=\"text-xs text-valorant-mint block\" data-testid=\"user-discord\">{user.discordId}</span>\n                </div>\n                <button \n                  onClick={handleLogout}\n                  className=\"glass-morphism px-4 py-2 rounded-lg hover:bg-valorant-red transition-colors\"\n                  data-testid=\"button-logout\"\n                  disabled={logoutMutation.isPending}\n                >\n                  <i className=\"fas fa-sign-out-alt\"></i>\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n      </nav>\n\n      {/* Main Content */}\n      <div className=\"pt-20 relative z-10\">\n        {children}\n      </div>\n\n      {/* Footer */}\n      <footer className=\"bg-valorant-navy border-t border-valorant-red/20 py-12 relative z-10\">\n        <div className=\"container mx-auto px-6 text-center\">\n          <div className=\"mb-6\">\n            <div className=\"flex items-center justify-center space-x-4 mb-4\">\n              <div className=\"w-12 h-12 bg-valorant-red rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-gamepad text-white text-xl\"></i>\n              </div>\n              <div>\n                <h3 className=\"font-teko text-3xl font-bold text-valorant-red\">NYXXUS E-SPORTS</h3>\n                <p className=\"text-valorant-mint\">Tournament Portal</p>\n              </div>\n            </div>\n            <p className=\"text-xl font-bold text-valorant-off-white\">Official Tournament Portal by Nyxxus E-Sports</p>\n          </div>\n          \n          <div className=\"flex justify-center space-x-6 mb-6\">\n            <a href=\"#\" className=\"text-valorant-mint hover:text-white transition-colors\">\n              <i className=\"fab fa-discord text-2xl\"></i>\n            </a>\n            <a href=\"#\" className=\"text-valorant-mint hover:text-white transition-colors\">\n              <i className=\"fab fa-twitter text-2xl\"></i>\n            </a>\n            <a href=\"#\" className=\"text-valorant-mint hover:text-white transition-colors\">\n              <i className=\"fab fa-instagram text-2xl\"></i>\n            </a>\n            <a href=\"#\" className=\"text-valorant-mint hover:text-white transition-colors\">\n              <i className=\"fab fa-youtube text-2xl\"></i>\n            </a>\n          </div>\n          \n          <div className=\"border-t border-valorant-red/20 pt-6\">\n            <p className=\"text-valorant-off-white/70\">© 2024 Nyxxus E-Sports. All rights reserved. | Spike Rush Cup 2.0</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":5776},"client/src/components/SkewButton.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\ninterface SkewButtonProps {\n  children: React.ReactNode;\n  className?: string;\n  variant?: \"primary\" | \"secondary\";\n  onClick?: () => void;\n  type?: \"button\" | \"submit\";\n  disabled?: boolean;\n  testId?: string;\n}\n\nexport default function SkewButton({ \n  children, \n  className = \"\", \n  variant = \"primary\",\n  onClick,\n  type = \"button\",\n  disabled = false,\n  testId\n}: SkewButtonProps) {\n  const baseClasses = \"skew-button px-8 py-4 text-xl font-bold rounded-lg\";\n  const variantClasses = variant === \"primary\" \n    ? \"bg-valorant-red text-white hover:bg-red-600\" \n    : \"glass-morphism-light hover:bg-valorant-mint hover:text-valorant-navy\";\n\n  return (\n    <Button\n      type={type}\n      onClick={onClick}\n      disabled={disabled}\n      className={cn(baseClasses, variantClasses, className)}\n      data-testid={testId}\n    >\n      <span className=\"block transform skew-x-10\">\n        {children}\n      </span>\n    </Button>\n  );\n}\n","size_bytes":1018},"client/src/components/ValorantCard.tsx":{"content":"import { cn } from \"@/lib/utils\";\n\ninterface ValorantCardProps {\n  children: React.ReactNode;\n  className?: string;\n  hover?: boolean;\n}\n\nexport default function ValorantCard({ children, className = \"\", hover = false }: ValorantCardProps) {\n  return (\n    <div className={cn(\n      \"glass-morphism rounded-2xl p-8\",\n      hover && \"card-hover\",\n      className\n    )}>\n      {children}\n    </div>\n  );\n}\n","size_bytes":404},"client/src/components/WebGLBackground.tsx":{"content":"import { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\n\ninterface WebGLBackgroundProps {\n  intensity?: number;\n  particleCount?: number;\n}\n\nexport default function WebGLBackground({ intensity = 1, particleCount = 2000 }: WebGLBackgroundProps) {\n  const mountRef = useRef<HTMLDivElement>(null);\n  const sceneRef = useRef<THREE.Scene | null>(null);\n  const rendererRef = useRef<THREE.WebGLRenderer | null>(null);\n  const animationFrameRef = useRef<number | null>(null);\n\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    scene.fog = new THREE.FogExp2(0x0f1923, 0.002);\n    sceneRef.current = scene;\n\n    // Camera\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    camera.position.z = 5;\n\n    // Renderer\n    const renderer = new THREE.WebGLRenderer({ \n      alpha: true, \n      antialias: true,\n      powerPreference: \"high-performance\"\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    renderer.setClearColor(0x0f1923, 0.1);\n    mountRef.current.appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n\n    // Valorant-themed colors\n    const valorantColors = [\n      0xFF4655, // Valorant Red\n      0x9AF7D7, // Valorant Mint\n      0xECE8E1, // Off White\n      0x1B2733, // Charcoal\n    ];\n\n    // Create particles\n    const particles = new THREE.BufferGeometry();\n    const positions = new Float32Array(particleCount * 3);\n    const colors = new Float32Array(particleCount * 3);\n    const velocities = new Float32Array(particleCount * 3);\n\n    for (let i = 0; i < particleCount; i++) {\n      const i3 = i * 3;\n      \n      // Random positions\n      positions[i3] = (Math.random() - 0.5) * 100;\n      positions[i3 + 1] = (Math.random() - 0.5) * 100;\n      positions[i3 + 2] = (Math.random() - 0.5) * 100;\n\n      // Random velocities\n      velocities[i3] = (Math.random() - 0.5) * 0.02;\n      velocities[i3 + 1] = (Math.random() - 0.5) * 0.02;\n      velocities[i3 + 2] = (Math.random() - 0.5) * 0.02;\n\n      // Random colors from Valorant palette\n      const color = new THREE.Color(valorantColors[Math.floor(Math.random() * valorantColors.length)]);\n      colors[i3] = color.r;\n      colors[i3 + 1] = color.g;\n      colors[i3 + 2] = color.b;\n    }\n\n    particles.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n    particles.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n\n    // Particle material with custom shader\n    const particleMaterial = new THREE.ShaderMaterial({\n      uniforms: {\n        uTime: { value: 0 },\n        uSize: { value: 3.0 },\n        uIntensity: { value: intensity }\n      },\n      vertexShader: `\n        uniform float uTime;\n        uniform float uSize;\n        uniform float uIntensity;\n        attribute vec3 color;\n        varying vec3 vColor;\n        varying float vAlpha;\n\n        void main() {\n          vColor = color;\n          \n          vec3 pos = position;\n          \n          // Add wave motion\n          pos.x += sin(uTime + position.y * 0.01) * 2.0;\n          pos.y += cos(uTime + position.x * 0.01) * 2.0;\n          pos.z += sin(uTime + position.x * 0.01 + position.y * 0.01) * 1.0;\n          \n          // Pulsing effect\n          float pulse = sin(uTime * 2.0 + length(position) * 0.05) * 0.5 + 0.5;\n          vAlpha = pulse * uIntensity;\n          \n          vec4 mvPosition = modelViewMatrix * vec4(pos, 1.0);\n          gl_PointSize = uSize * (300.0 / -mvPosition.z) * pulse;\n          gl_Position = projectionMatrix * mvPosition;\n        }\n      `,\n      fragmentShader: `\n        varying vec3 vColor;\n        varying float vAlpha;\n\n        void main() {\n          // Create circular particles with glow\n          vec2 center = gl_PointCoord - 0.5;\n          float dist = length(center);\n          \n          if (dist > 0.5) discard;\n          \n          float alpha = 1.0 - smoothstep(0.2, 0.5, dist);\n          alpha *= vAlpha;\n          \n          // Add glow effect\n          float glow = 1.0 - smoothstep(0.0, 0.3, dist);\n          \n          gl_FragColor = vec4(vColor, alpha * 0.8);\n        }\n      `,\n      transparent: true,\n      blending: THREE.AdditiveBlending,\n      depthWrite: false\n    });\n\n    const particleSystem = new THREE.Points(particles, particleMaterial);\n    scene.add(particleSystem);\n\n    // Create hexagonal grid background\n    const hexGeometry = new THREE.RingGeometry(0.5, 0.6, 6);\n    const hexMaterial = new THREE.MeshBasicMaterial({ \n      color: 0xFF4655, \n      transparent: true, \n      opacity: 0.1,\n      wireframe: true \n    });\n\n    for (let i = 0; i < 50; i++) {\n      const hex = new THREE.Mesh(hexGeometry, hexMaterial);\n      hex.position.set(\n        (Math.random() - 0.5) * 200,\n        (Math.random() - 0.5) * 200,\n        (Math.random() - 0.5) * 100\n      );\n      hex.rotation.z = Math.random() * Math.PI;\n      scene.add(hex);\n    }\n\n    // Animation\n    let time = 0;\n    const animate = () => {\n      time += 0.016;\n      \n      // Update particle material uniforms\n      if (particleMaterial.uniforms) {\n        particleMaterial.uniforms.uTime.value = time;\n      }\n\n      // Move particles\n      const positions = particles.attributes.position.array as Float32Array;\n      for (let i = 0; i < particleCount; i++) {\n        const i3 = i * 3;\n        positions[i3] += velocities[i3];\n        positions[i3 + 1] += velocities[i3 + 1];\n        positions[i3 + 2] += velocities[i3 + 2];\n\n        // Wrap around boundaries\n        if (Math.abs(positions[i3]) > 50) velocities[i3] *= -1;\n        if (Math.abs(positions[i3 + 1]) > 50) velocities[i3 + 1] *= -1;\n        if (Math.abs(positions[i3 + 2]) > 50) velocities[i3 + 2] *= -1;\n      }\n      particles.attributes.position.needsUpdate = true;\n\n      // Rotate camera slightly\n      camera.position.x = Math.sin(time * 0.1) * 0.5;\n      camera.position.y = Math.cos(time * 0.1) * 0.5;\n      camera.lookAt(0, 0, 0);\n\n      renderer.render(scene, camera);\n      animationFrameRef.current = requestAnimationFrame(animate);\n    };\n\n    animate();\n\n    // Handle resize\n    const handleResize = () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      \n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      window.removeEventListener('resize', handleResize);\n      \n      if (mountRef.current && renderer.domElement) {\n        mountRef.current.removeChild(renderer.domElement);\n      }\n      \n      renderer.dispose();\n      scene.clear();\n    };\n  }, [intensity, particleCount]);\n\n  return (\n    <div\n      ref={mountRef}\n      className=\"fixed inset-0 pointer-events-none z-0\"\n      style={{ background: 'transparent' }}\n    />\n  );\n}","size_bytes":7092},"client/src/components/WebGLGlitchEffect.tsx":{"content":"import { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\n\ninterface WebGLGlitchEffectProps {\n  trigger?: boolean;\n  intensity?: number;\n}\n\nexport default function WebGLGlitchEffect({ trigger = false, intensity = 1 }: WebGLGlitchEffectProps) {\n  const mountRef = useRef<HTMLDivElement>(null);\n  const rendererRef = useRef<THREE.WebGLRenderer | null>(null);\n  const sceneRef = useRef<THREE.Scene | null>(null);\n  const animationFrameRef = useRef<number | null>(null);\n\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    sceneRef.current = scene;\n\n    // Camera\n    const camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n\n    // Renderer\n    const renderer = new THREE.WebGLRenderer({ \n      alpha: true, \n      antialias: false,\n      powerPreference: \"high-performance\"\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    mountRef.current.appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n\n    // Create glitch plane\n    const planeGeometry = new THREE.PlaneGeometry(2, 2);\n    \n    // Advanced glitch shader\n    const glitchMaterial = new THREE.ShaderMaterial({\n      uniforms: {\n        uTime: { value: 0 },\n        uIntensity: { value: intensity },\n        uTrigger: { value: trigger ? 1.0 : 0.0 },\n        uResolution: { value: new THREE.Vector2(window.innerWidth, window.innerHeight) }\n      },\n      vertexShader: `\n        varying vec2 vUv;\n        \n        void main() {\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      `,\n      fragmentShader: `\n        uniform float uTime;\n        uniform float uIntensity;\n        uniform float uTrigger;\n        uniform vec2 uResolution;\n        varying vec2 vUv;\n\n        // Valorant color palette\n        vec3 valorantRed = vec3(1.0, 0.275, 0.333);\n        vec3 valorantMint = vec3(0.604, 0.969, 0.843);\n        vec3 valorantNavy = vec3(0.059, 0.098, 0.137);\n\n        // Random function\n        float random(vec2 st) {\n          return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n        }\n\n        // Noise function\n        float noise(vec2 st) {\n          vec2 i = floor(st);\n          vec2 f = fract(st);\n          \n          float a = random(i);\n          float b = random(i + vec2(1.0, 0.0));\n          float c = random(i + vec2(0.0, 1.0));\n          float d = random(i + vec2(1.0, 1.0));\n          \n          vec2 u = f * f * (3.0 - 2.0 * f);\n          \n          return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n        }\n\n        // Digital glitch effect\n        vec3 digitalGlitch(vec2 uv, float time) {\n          vec2 glitchUv = uv;\n          \n          // Horizontal displacement\n          float displacement = sin(time * 10.0 + uv.y * 50.0) * 0.01 * uIntensity;\n          glitchUv.x += displacement;\n          \n          // Vertical bars\n          float bars = step(0.98, sin(uv.y * 100.0 + time * 5.0));\n          glitchUv.x += bars * 0.05 * uIntensity;\n          \n          // Color channels separation\n          vec3 color = vec3(0.0);\n          color.r = step(0.5, noise(glitchUv * 10.0 + time));\n          color.g = step(0.5, noise(glitchUv * 10.0 + time + 100.0));\n          color.b = step(0.5, noise(glitchUv * 10.0 + time + 200.0));\n          \n          return color;\n        }\n\n        // Scanlines effect\n        float scanlines(vec2 uv, float time) {\n          float scanline = sin(uv.y * uResolution.y * 1.5) * 0.5 + 0.5;\n          scanline *= 0.9 + 0.1 * sin(time * 10.0);\n          return scanline;\n        }\n\n        // Hexagonal pattern\n        float hexPattern(vec2 uv, float time) {\n          vec2 hexUv = uv * 20.0;\n          vec2 hexId = floor(hexUv);\n          vec2 hexLocal = fract(hexUv) - 0.5;\n          \n          float hexDist = abs(hexLocal.x) + abs(hexLocal.y) * 0.866;\n          float hex = smoothstep(0.4, 0.45, hexDist);\n          \n          // Animate hex pattern\n          float hexTime = time + dot(hexId, vec2(0.1, 0.13));\n          hex *= 0.5 + 0.5 * sin(hexTime * 3.0);\n          \n          return hex;\n        }\n\n        void main() {\n          vec2 uv = vUv;\n          float time = uTime;\n          \n          vec3 color = vec3(0.0);\n          float alpha = 0.0;\n          \n          if (uTrigger > 0.5 || uIntensity > 0.1) {\n            // Digital glitch\n            vec3 glitch = digitalGlitch(uv, time);\n            \n            // Apply Valorant colors\n            color += glitch.r * valorantRed * 0.3;\n            color += glitch.g * valorantMint * 0.2;\n            color += glitch.b * valorantNavy * 0.1;\n            \n            // Scanlines\n            float scan = scanlines(uv, time);\n            color *= scan;\n            \n            // Hexagonal overlay\n            float hex = hexPattern(uv, time);\n            color += hex * valorantMint * 0.1;\n            \n            // Noise overlay\n            float n = noise(uv * 100.0 + time * 2.0);\n            color += n * 0.05;\n            \n            // Calculate alpha based on intensity and effects\n            alpha = (glitch.r + glitch.g + glitch.b) * 0.3 * uIntensity;\n            alpha += hex * 0.1 * uIntensity;\n            alpha *= uTrigger * 0.5 + 0.3;\n          }\n          \n          gl_FragColor = vec4(color, alpha);\n        }\n      `,\n      transparent: true,\n      blending: THREE.AdditiveBlending\n    });\n\n    const glitchPlane = new THREE.Mesh(planeGeometry, glitchMaterial);\n    scene.add(glitchPlane);\n\n    // Animation\n    let time = 0;\n    const animate = () => {\n      time += 0.016;\n      \n      if (glitchMaterial.uniforms) {\n        glitchMaterial.uniforms.uTime.value = time;\n        glitchMaterial.uniforms.uIntensity.value = intensity;\n        glitchMaterial.uniforms.uTrigger.value = trigger ? 1.0 : 0.0;\n      }\n\n      renderer.render(scene, camera);\n      animationFrameRef.current = requestAnimationFrame(animate);\n    };\n\n    animate();\n\n    // Handle resize\n    const handleResize = () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      \n      renderer.setSize(width, height);\n      if (glitchMaterial.uniforms) {\n        glitchMaterial.uniforms.uResolution.value.set(width, height);\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      window.removeEventListener('resize', handleResize);\n      \n      if (mountRef.current && renderer.domElement) {\n        mountRef.current.removeChild(renderer.domElement);\n      }\n      \n      renderer.dispose();\n      scene.clear();\n    };\n  }, [trigger, intensity]);\n\n  return (\n    <div\n      ref={mountRef}\n      className=\"fixed inset-0 pointer-events-none z-10\"\n      style={{ \n        mixBlendMode: 'screen',\n        opacity: trigger ? 1 : 0.3 \n      }}\n    />\n  );\n}","size_bytes":7020},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: response, isLoading, error } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user: response?.user as User | undefined,\n    isLoading,\n    isAuthenticated: !!response?.user,\n    error,\n  };\n}\n","size_bytes":364},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Home.tsx":{"content":"import { Link } from \"wouter\";\nimport { useState } from \"react\";\nimport Layout from \"@/components/Layout\";\nimport GlitchText from \"@/components/GlitchText\";\nimport SkewButton from \"@/components/SkewButton\";\nimport WebGLBackground from \"@/components/WebGLBackground\";\nimport WebGLGlitchEffect from \"@/components/WebGLGlitchEffect\";\nimport Interactive3DLogo from \"@/components/Interactive3DLogo\";\n\nexport default function Home() {\n  const [glitchTrigger, setGlitchTrigger] = useState(false);\n\n  const handleLogoHover = () => {\n    setGlitchTrigger(true);\n    setTimeout(() => setGlitchTrigger(false), 2000);\n  };\n\n  return (\n    <Layout>\n      {/* Epic WebGL Background Effects */}\n      <WebGLBackground intensity={1} particleCount={3000} />\n      <WebGLGlitchEffect trigger={glitchTrigger} intensity={0.8} />\n      \n      {/* Hero Section */}\n      <section className=\"min-h-screen flex items-center justify-center relative diagonal-section\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-valorant-navy/70 to-valorant-charcoal/70\"></div>\n        <div className=\"container mx-auto px-6 text-center relative z-20\">\n          <div className=\"mb-8 animate-float\">\n            {/* Interactive 3D Logo */}\n            <div className=\"flex justify-center mb-6\" onMouseEnter={handleLogoHover}>\n              <Interactive3DLogo text=\"NYXXUS\" size={1.2} hover={glitchTrigger} />\n            </div>\n            \n            <h1 className=\"font-teko text-6xl md:text-8xl font-bold mb-4\">\n              <GlitchText text=\"NYXXUS E-SPORTS\" />\n            </h1>\n            <div className=\"h-1 w-32 bg-gradient-to-r from-valorant-red to-valorant-mint mx-auto mb-6\"></div>\n            <h2 className=\"font-teko text-4xl md:text-6xl text-valorant-mint mb-4\">PRESENTS</h2>\n            <h3 className=\"font-teko text-5xl md:text-7xl text-valorant-red font-bold animate-pulse-glow\">\n              SPIKE RUSH CUP 2.0\n            </h3>\n          </div>\n          \n          <p className=\"text-xl mb-12 max-w-2xl mx-auto opacity-90\">\n            The ultimate Valorant tournament experience. Compete with the best, claim your victory.\n          </p>\n          \n          <div className=\"flex flex-col md:flex-row gap-6 justify-center items-center\">\n            <Link href=\"/register\">\n              <SkewButton variant=\"primary\" testId=\"button-register-team\">\n                <i className=\"fas fa-users mr-2\"></i>REGISTER TEAM\n              </SkewButton>\n            </Link>\n            <Link href=\"/rules\">\n              <SkewButton variant=\"secondary\" testId=\"button-view-rules\">\n                <i className=\"fas fa-book mr-2\"></i>VIEW RULES\n              </SkewButton>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Tournament Info Section */}\n      <section className=\"py-20 bg-valorant-charcoal\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"font-teko text-5xl font-bold text-valorant-red mb-4\">TOURNAMENT INFO</h2>\n            <div className=\"h-1 w-24 bg-valorant-mint mx-auto mb-6\"></div>\n          </div>\n          \n          <div className=\"grid md:grid-cols-3 gap-8 max-w-4xl mx-auto\">\n            <div className=\"glass-morphism rounded-2xl p-6 text-center card-hover\">\n              <div className=\"w-16 h-16 bg-valorant-red rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-trophy text-white text-2xl\"></i>\n              </div>\n              <h3 className=\"font-teko text-2xl font-bold text-valorant-mint mb-2\">PRIZE POOL</h3>\n              <p className=\"text-3xl font-bold text-valorant-red\">₹50,000</p>\n              <p className=\"text-sm text-valorant-off-white/70\">Total Prize Money</p>\n            </div>\n            \n            <div className=\"glass-morphism rounded-2xl p-6 text-center card-hover\">\n              <div className=\"w-16 h-16 bg-valorant-mint rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-users text-valorant-navy text-2xl\"></i>\n              </div>\n              <h3 className=\"font-teko text-2xl font-bold text-valorant-mint mb-2\">TEAM SIZE</h3>\n              <p className=\"text-3xl font-bold text-valorant-red\">5 Players</p>\n              <p className=\"text-sm text-valorant-off-white/70\">Per Team</p>\n            </div>\n            \n            <div className=\"glass-morphism rounded-2xl p-6 text-center card-hover\">\n              <div className=\"w-16 h-16 bg-valorant-red rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-rupee-sign text-white text-2xl\"></i>\n              </div>\n              <h3 className=\"font-teko text-2xl font-bold text-valorant-mint mb-2\">ENTRY FEE</h3>\n              <p className=\"text-3xl font-bold text-valorant-red\">₹500</p>\n              <p className=\"text-sm text-valorant-off-white/70\">Per Team</p>\n            </div>\n          </div>\n        </div>\n      </section>\n    </Layout>\n  );\n}\n","size_bytes":5004},"client/src/pages/Login.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { loginSchema, type LoginData } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport ValorantCard from \"@/components/ValorantCard\";\nimport GlitchText from \"@/components/GlitchText\";\nimport WebGLBackground from \"@/components/WebGLBackground\";\nimport WebGLGlitchEffect from \"@/components/WebGLGlitchEffect\";\n\nexport default function Login() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  const [showGlitch, setShowGlitch] = useState(false);\n  \n  const form = useForm<LoginData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: (data: LoginData) => apiRequest(\"POST\", \"/api/auth/login\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Welcome back!\",\n        description: \"You have been logged in successfully\",\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginData) => {\n    setShowGlitch(true);\n    loginMutation.mutate(data);\n    setTimeout(() => setShowGlitch(false), 3000);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-valorant-navy p-6\">\n      {/* Epic WebGL Background Effects */}\n      <WebGLBackground intensity={0.6} particleCount={1500} />\n      <WebGLGlitchEffect trigger={showGlitch} intensity={1.2} />\n      \n      {/* Background Effects */}\n      <div className=\"fixed inset-0 hexagon-pattern opacity-20 pointer-events-none\"></div>\n      <div className=\"fixed inset-0 bg-gradient-to-br from-valorant-navy/80 via-valorant-charcoal/80 to-valorant-navy/80 pointer-events-none\"></div>\n      \n      <div className=\"w-full max-w-md relative z-20\">\n        <ValorantCard className=\"text-center\">\n          <div className=\"mb-8\">\n            <div className=\"w-16 h-16 bg-valorant-red rounded-lg flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-gamepad text-white text-2xl\"></i>\n            </div>\n            <h1 className=\"font-teko text-4xl font-bold mb-2\">\n              <GlitchText text=\"NYXXUS E-SPORTS\" />\n            </h1>\n            <p className=\"text-valorant-mint\">Tournament Portal</p>\n          </div>\n\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"space-y-2 text-left\">\n              <Label htmlFor=\"email\" className=\"text-valorant-mint font-bold\">EMAIL</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                {...form.register(\"email\")}\n                className=\"bg-valorant-charcoal border-valorant-red/30 text-valorant-off-white focus:border-valorant-red\"\n                placeholder=\"Enter your email\"\n                data-testid=\"input-email\"\n              />\n              {form.formState.errors.email && (\n                <p className=\"text-red-400 text-sm\">{form.formState.errors.email.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2 text-left\">\n              <Label htmlFor=\"password\" className=\"text-valorant-mint font-bold\">PASSWORD</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                {...form.register(\"password\")}\n                className=\"bg-valorant-charcoal border-valorant-red/30 text-valorant-off-white focus:border-valorant-red\"\n                placeholder=\"Enter your password\"\n                data-testid=\"input-password\"\n              />\n              {form.formState.errors.password && (\n                <p className=\"text-red-400 text-sm\">{form.formState.errors.password.message}</p>\n              )}\n            </div>\n\n            <Button\n              type=\"submit\"\n              disabled={loginMutation.isPending}\n              className=\"w-full bg-valorant-red hover:bg-red-600 text-white font-bold py-3 rounded-lg transition-colors\"\n              data-testid=\"button-login\"\n            >\n              {loginMutation.isPending ? (\n                <div className=\"flex items-center\">\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  LOGGING IN...\n                </div>\n              ) : (\n                <>\n                  <i className=\"fas fa-sign-in-alt mr-2\"></i>\n                  LOGIN\n                </>\n              )}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 pt-6 border-t border-valorant-red/20\">\n            <p className=\"text-valorant-off-white/70\">\n              Don't have an account?{\" \"}\n              <Link href=\"/signup\" className=\"text-valorant-mint hover:text-valorant-red transition-colors font-bold\">\n                Sign Up\n              </Link>\n            </p>\n          </div>\n        </ValorantCard>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5523},"client/src/pages/Profile.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Layout from \"@/components/Layout\";\nimport ValorantCard from \"@/components/ValorantCard\";\n\nexport default function Profile() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  \n  const { data: team, refetch } = useQuery({\n    queryKey: [\"/api/teams/my-team\"],\n    retry: false,\n    refetchInterval: 30000, // Check for updates every 30 seconds\n  });\n\n  // Show notification when team status changes\n  useEffect(() => {\n    if (team?.status === \"approved\") {\n      toast({\n        title: \"🎉 Team Approved!\",\n        description: \"Congratulations! Your team has been approved for the tournament. Get ready to compete!\",\n        duration: 10000,\n      });\n    } else if (team?.status === \"rejected\" && team?.rejectionReason) {\n      toast({\n        title: \"❌ Registration Issues\",\n        description: `Your registration was rejected: ${team.rejectionReason}`,\n        variant: \"destructive\",\n        duration: 10000,\n      });\n    }\n  }, [team?.status, team?.rejectionReason, toast]);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return \"status-approved\";\n      case \"rejected\":\n        return \"status-rejected\";\n      default:\n        return \"status-pending\";\n    }\n  };\n\n  return (\n    <Layout>\n      <section className=\"py-20 bg-valorant-charcoal min-h-screen\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"font-teko text-5xl font-bold text-valorant-red mb-4\">PLAYER PROFILE</h2>\n            <div className=\"h-1 w-24 bg-valorant-mint mx-auto\"></div>\n          </div>\n          \n          <div className=\"max-w-4xl mx-auto grid md:grid-cols-2 gap-8\">\n            {/* User Info */}\n            <ValorantCard>\n              <h3 className=\"font-teko text-2xl font-bold text-valorant-mint mb-4\">PLAYER INFO</h3>\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-valorant-off-white/70\">Name:</span>\n                  <span data-testid=\"text-user-name\">{user?.name}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-valorant-off-white/70\">Email:</span>\n                  <span data-testid=\"text-user-email\">{user?.email}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-valorant-off-white/70\">Discord:</span>\n                  <span data-testid=\"text-user-discord\">{user?.discordId}</span>\n                </div>\n              </div>\n            </ValorantCard>\n            \n            {/* Team Status */}\n            <ValorantCard>\n              <h3 className=\"font-teko text-2xl font-bold text-valorant-mint mb-4\">TEAM STATUS</h3>\n              {team ? (\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span>Team Name:</span>\n                    <span className=\"font-bold\" data-testid=\"text-team-name\">{team.teamName}</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>Status:</span>\n                    <span \n                      className={`${getStatusColor(team.status)} px-3 py-1 rounded-full text-xs font-bold text-white`}\n                      data-testid=\"text-team-status\"\n                    >\n                      {team.status.toUpperCase()}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>Members:</span>\n                    <span data-testid=\"text-team-members\">{team.members?.length || 0}/5</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>Payment:</span>\n                    {team.paymentProofPath ? (\n                      <i className=\"fas fa-check text-valorant-mint\" data-testid=\"icon-payment-verified\"></i>\n                    ) : (\n                      <i className=\"fas fa-times text-valorant-red\" data-testid=\"icon-payment-pending\"></i>\n                    )}\n                  </div>\n                  \n                  {team.status === \"approved\" && (\n                    <div className=\"mt-4 p-4 bg-green-900/20 rounded-lg border border-green-500/30\">\n                      <div className=\"flex items-center\">\n                        <i className=\"fas fa-trophy text-yellow-400 mr-2\"></i>\n                        <h4 className=\"font-bold text-green-400\">🎉 Ready to Compete!</h4>\n                      </div>\n                      <p className=\"text-green-300 text-sm mt-2\">Your team is approved and ready for the tournament. Good luck!</p>\n                    </div>\n                  )}\n                  \n                  {team.status === \"pending\" && (\n                    <div className=\"mt-4 p-4 bg-orange-900/20 rounded-lg border border-orange-500/30\">\n                      <div className=\"flex items-center\">\n                        <i className=\"fas fa-clock text-orange-400 mr-2\"></i>\n                        <h4 className=\"font-bold text-orange-400\">⏳ Under Review</h4>\n                      </div>\n                      <p className=\"text-orange-300 text-sm mt-2\">Payment verification in progress. You'll be notified once approved!</p>\n                    </div>\n                  )}\n                  \n                  {team.status === \"rejected\" && team.rejectionReason && (\n                    <div className=\"mt-4 p-4 bg-red-900/20 rounded-lg border border-red-500/30\">\n                      <div className=\"flex items-center\">\n                        <i className=\"fas fa-exclamation-triangle text-red-400 mr-2\"></i>\n                        <h4 className=\"font-bold text-red-400 mb-2\">❌ Registration Issues</h4>\n                      </div>\n                      <p className=\"text-red-300 text-sm\" data-testid=\"text-rejection-reason\">{team.rejectionReason}</p>\n                      <p className=\"text-red-200 text-xs mt-2\">Please contact support or resubmit with correct information.</p>\n                    </div>\n                  )}\n                  \n                  {/* Payment Proof */}\n                  {team.paymentProofPath && (\n                    <div className=\"mt-6 pt-4 border-t border-valorant-red/20\">\n                      <h4 className=\"font-bold text-valorant-mint mb-2\">Payment Proof:</h4>\n                      <div className=\"w-full h-32 bg-valorant-navy rounded-lg flex items-center justify-center border border-valorant-red/30 overflow-hidden\">\n                        <img \n                          src={`/uploads/${team.paymentProofPath}`} \n                          alt=\"Payment Proof\"\n                          className=\"max-w-full max-h-full object-contain\"\n                          data-testid=\"img-payment-proof\"\n                        />\n                      </div>\n                    </div>\n                  )}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <i className=\"fas fa-users text-4xl text-valorant-mint/50 mb-4\"></i>\n                  <p className=\"text-valorant-off-white/70\" data-testid=\"text-no-team\">No team registered yet</p>\n                  <p className=\"text-sm text-valorant-mint mt-2\">Register your team to participate in the tournament</p>\n                </div>\n              )}\n            </ValorantCard>\n          </div>\n        </div>\n      </section>\n    </Layout>\n  );\n}\n","size_bytes":7779},"client/src/pages/Register.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertTeamSchema, type InsertTeam } from \"@shared/schema\";\nimport paymentQrImage from \"../assets/payment-qr.png\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport Layout from \"@/components/Layout\";\nimport ValorantCard from \"@/components/ValorantCard\";\nimport SkewButton from \"@/components/SkewButton\";\n\nexport default function Register() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showPayment, setShowPayment] = useState(false);\n  \n  const { data: registrationStatus } = useQuery({\n    queryKey: [\"/api/settings/registration-open\"],\n  });\n\n  const { data: existingTeam } = useQuery({\n    queryKey: [\"/api/teams/my-team\"],\n    retry: false,\n  });\n\n  const form = useForm<InsertTeam>({\n    resolver: zodResolver(insertTeamSchema),\n    defaultValues: {\n      teamName: \"\",\n      members: [{ ign: \"\", discord: \"\" }],\n    },\n  });\n\n  const members = form.watch(\"members\");\n\n  const addMember = () => {\n    if (members.length < 5) {\n      form.setValue(\"members\", [...members, { ign: \"\", discord: \"\" }]);\n    }\n  };\n\n  const removeMember = (index: number) => {\n    if (members.length > 1) {\n      const newMembers = members.filter((_, i) => i !== index);\n      form.setValue(\"members\", newMembers);\n    }\n  };\n\n  const registerMutation = useMutation({\n    mutationFn: (formData: FormData) => {\n      return fetch(\"/api/teams/register\", {\n        method: \"POST\",\n        body: formData,\n        credentials: \"include\",\n      });\n    },\n    onSuccess: async (response) => {\n      if (response.ok) {\n        queryClient.invalidateQueries({ queryKey: [\"/api/teams/my-team\"] });\n        toast({\n          title: \"🎉 Registration Complete!\",\n          description: \"Your team has been registered. Payment verification is in progress. You'll get notified once approved!\",\n        });\n        setShowPayment(false);\n        // Redirect to profile to see status\n        setTimeout(() => {\n          window.location.href = \"/profile\";\n        }, 2000);\n      } else {\n        const error = await response.json();\n        throw new Error(error.message);\n      }\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: InsertTeam) => {\n    setShowPayment(true);\n  };\n\n  const handlePaymentSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    \n    // Add team data to form\n    formData.append(\"teamName\", form.getValues(\"teamName\"));\n    formData.append(\"members\", JSON.stringify(form.getValues(\"members\")));\n    \n    registerMutation.mutate(formData);\n  };\n\n  if (!registrationStatus?.registrationOpen) {\n    return (\n      <Layout>\n        <div className=\"min-h-screen flex items-center justify-center\">\n          <ValorantCard className=\"text-center max-w-md\">\n            <div className=\"w-16 h-16 bg-valorant-red rounded-lg flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-lock text-white text-2xl\"></i>\n            </div>\n            <h2 className=\"font-teko text-4xl font-bold text-valorant-red mb-4\">REGISTRATION CLOSED</h2>\n            <p className=\"text-valorant-off-white/70\">\n              Tournament registration is currently closed. Please check back later.\n            </p>\n          </ValorantCard>\n        </div>\n      </Layout>\n    );\n  }\n\n  if (existingTeam) {\n    return (\n      <Layout>\n        <div className=\"min-h-screen flex items-center justify-center\">\n          <ValorantCard className=\"text-center max-w-md\">\n            <div className=\"w-16 h-16 bg-valorant-mint rounded-lg flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-check text-valorant-navy text-2xl\"></i>\n            </div>\n            <h2 className=\"font-teko text-4xl font-bold text-valorant-mint mb-4\">ALREADY REGISTERED</h2>\n            <p className=\"text-valorant-off-white/70 mb-6\">\n              You have already registered a team for this tournament.\n            </p>\n            <p className=\"text-valorant-red font-bold\">Team: {existingTeam.teamName}</p>\n          </ValorantCard>\n        </div>\n      </Layout>\n    );\n  }\n\n  if (showPayment) {\n    return (\n      <Layout>\n        <section className=\"py-20 min-h-screen\">\n          <div className=\"container mx-auto px-6\">\n            <div className=\"max-w-2xl mx-auto text-center\">\n              <ValorantCard>\n                <h3 className=\"font-teko text-4xl font-bold text-valorant-red mb-6\">COMPLETE PAYMENT</h3>\n                \n                <div className=\"mb-8\">\n                  <div className=\"w-64 h-64 mx-auto bg-white rounded-lg p-4 mb-6 shadow-lg\">\n                    <img \n                      src={paymentQrImage}\n                      alt=\"Payment QR Code\" \n                      className=\"w-full h-full object-contain\"\n                    />\n                  </div>\n                  <div className=\"mb-6\">\n                    <p className=\"text-valorant-mint mb-2 text-lg\">💳 Scan QR code to make payment</p>\n                    <p className=\"text-3xl font-bold text-valorant-red mb-2\">₹500 Entry Fee</p>\n                    <p className=\"text-valorant-off-white/80 text-sm\">UPI • TRIS • Supported</p>\n                  </div>\n                  \n                  <div className=\"bg-valorant-charcoal/50 rounded-lg p-4 mb-6\">\n                    <h4 className=\"text-valorant-mint font-bold mb-2\">Payment Instructions:</h4>\n                    <ol className=\"text-left text-valorant-off-white/80 text-sm space-y-1\">\n                      <li>1. Scan the QR code with your UPI app</li>\n                      <li>2. Complete the payment of ₹500</li>\n                      <li>3. Take a screenshot of payment confirmation</li>\n                      <li>4. Upload the screenshot below and submit</li>\n                    </ol>\n                  </div>\n                </div>\n                \n                <form onSubmit={handlePaymentSubmit}>\n                  <div className=\"mb-6\">\n                    <Label className=\"block text-sm font-bold text-valorant-mint mb-2\">\n                      UPLOAD PAYMENT PROOF *\n                    </Label>\n                    <input\n                      type=\"file\"\n                      name=\"paymentProof\"\n                      accept=\".jpg,.jpeg,.png,.pdf\"\n                      required\n                      className=\"w-full bg-valorant-charcoal border border-valorant-red/30 rounded-lg px-4 py-3 text-white file:bg-valorant-red file:border-0 file:text-white file:px-4 file:py-2 file:rounded file:mr-4\"\n                      data-testid=\"input-payment-proof\"\n                    />\n                    <p className=\"text-xs text-valorant-mint mt-2\">Accepted formats: JPG, PNG, PDF</p>\n                  </div>\n                  \n                  <div className=\"flex gap-4 justify-center\">\n                    <Button\n                      type=\"button\"\n                      onClick={() => setShowPayment(false)}\n                      className=\"glass-morphism-light px-8 py-3 font-bold rounded-lg hover:bg-valorant-mint hover:text-valorant-navy\"\n                      data-testid=\"button-back\"\n                    >\n                      BACK\n                    </Button>\n                    <SkewButton \n                      type=\"submit\" \n                      variant=\"primary\" \n                      disabled={registerMutation.isPending}\n                      testId=\"button-submit-proof\"\n                      className=\"min-w-[200px]\"\n                    >\n                      {registerMutation.isPending ? (\n                        <>\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2 inline-block\"></div>\n                          COMPLETING...\n                        </>\n                      ) : (\n                        <>\n                          <i className=\"fas fa-check-circle mr-2\"></i>\n                          COMPLETE REGISTRATION\n                        </>\n                      )}\n                    </SkewButton>\n                  </div>\n                </form>\n              </ValorantCard>\n            </div>\n          </div>\n        </section>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout>\n      <section className=\"py-20 bg-valorant-charcoal min-h-screen\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"font-teko text-5xl font-bold text-valorant-red mb-4\">TEAM REGISTRATION</h2>\n            <div className=\"h-1 w-24 bg-valorant-mint mx-auto mb-6\"></div>\n            <p className=\"text-xl opacity-90\">Assemble your squad for the ultimate Valorant showdown</p>\n          </div>\n          \n          <div className=\"max-w-4xl mx-auto\">\n            <ValorantCard hover>\n              <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n                {/* Team Info */}\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div>\n                    <Label className=\"block text-sm font-bold text-valorant-mint mb-2\">TEAM NAME *</Label>\n                    <Input\n                      {...form.register(\"teamName\")}\n                      className=\"w-full bg-valorant-navy border border-valorant-red/30 rounded-lg px-4 py-3 text-white focus:border-valorant-red focus:outline-none\"\n                      placeholder=\"Enter your team name\"\n                      data-testid=\"input-team-name\"\n                    />\n                    {form.formState.errors.teamName && (\n                      <p className=\"text-red-400 text-sm mt-1\">{form.formState.errors.teamName.message}</p>\n                    )}\n                  </div>\n                  \n                  <div>\n                    <Label className=\"block text-sm font-bold text-valorant-mint mb-2\">TEAM LEADER *</Label>\n                    <Input\n                      value={user?.name || \"\"}\n                      className=\"w-full bg-valorant-charcoal border border-valorant-mint/30 rounded-lg px-4 py-3 text-valorant-off-white\"\n                      readOnly\n                      data-testid=\"text-leader-name\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div>\n                    <Label className=\"block text-sm font-bold text-valorant-mint mb-2\">LEADER EMAIL</Label>\n                    <Input\n                      value={user?.email || \"\"}\n                      className=\"w-full bg-valorant-charcoal border border-valorant-mint/30 rounded-lg px-4 py-3 text-valorant-off-white\"\n                      readOnly\n                      data-testid=\"text-leader-email\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label className=\"block text-sm font-bold text-valorant-mint mb-2\">LEADER DISCORD</Label>\n                    <Input\n                      value={user?.discordId || \"\"}\n                      className=\"w-full bg-valorant-charcoal border border-valorant-mint/30 rounded-lg px-4 py-3 text-valorant-off-white\"\n                      readOnly\n                      data-testid=\"text-leader-discord\"\n                    />\n                  </div>\n                </div>\n                \n                {/* Team Members */}\n                <div>\n                  <h3 className=\"font-teko text-2xl font-bold text-valorant-red mb-4\">TEAM MEMBERS (Up to 5)</h3>\n                  <div className=\"space-y-4\">\n                    {members.map((member, index) => (\n                      <div key={index} className=\"grid md:grid-cols-2 gap-4 glass-morphism-light rounded-lg p-4\">\n                        <div>\n                          <Label className=\"block text-sm font-bold text-valorant-mint mb-2\">\n                            IGN (In-Game Name) *\n                          </Label>\n                          <Input\n                            {...form.register(`members.${index}.ign`)}\n                            className=\"w-full bg-valorant-navy border border-valorant-red/30 rounded-lg px-4 py-3 text-white focus:border-valorant-red focus:outline-none\"\n                            placeholder=\"Player IGN\"\n                            data-testid={`input-member-ign-${index}`}\n                          />\n                          {form.formState.errors.members?.[index]?.ign && (\n                            <p className=\"text-red-400 text-sm mt-1\">{form.formState.errors.members[index]?.ign?.message}</p>\n                          )}\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <div className=\"flex-1\">\n                            <Label className=\"block text-sm font-bold text-valorant-mint mb-2\">\n                              Discord (Optional)\n                            </Label>\n                            <Input\n                              {...form.register(`members.${index}.discord`)}\n                              className=\"w-full bg-valorant-navy border border-valorant-red/30 rounded-lg px-4 py-3 text-white focus:border-valorant-red focus:outline-none\"\n                              placeholder=\"Discord#1234\"\n                              data-testid={`input-member-discord-${index}`}\n                            />\n                          </div>\n                          {members.length > 1 && (\n                            <Button\n                              type=\"button\"\n                              onClick={() => removeMember(index)}\n                              className=\"mt-7 px-3 py-2 bg-red-600 hover:bg-red-500 text-white rounded\"\n                              data-testid={`button-remove-member-${index}`}\n                            >\n                              <i className=\"fas fa-trash\"></i>\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                  \n                  {members.length < 5 && (\n                    <Button\n                      type=\"button\"\n                      onClick={addMember}\n                      className=\"mt-4 glass-morphism-light px-4 py-2 rounded-lg hover:bg-valorant-mint hover:text-valorant-navy transition-colors\"\n                      data-testid=\"button-add-member\"\n                    >\n                      <i className=\"fas fa-plus mr-2\"></i>Add Member\n                    </Button>\n                  )}\n                </div>\n                \n                <div className=\"flex justify-center\">\n                  <SkewButton type=\"submit\" testId=\"button-register-team-submit\">\n                    <i className=\"fas fa-rocket mr-2\"></i>REGISTER TEAM\n                  </SkewButton>\n                </div>\n              </form>\n            </ValorantCard>\n          </div>\n        </div>\n      </section>\n    </Layout>\n  );\n}\n","size_bytes":15541},"client/src/pages/Rules.tsx":{"content":"import Layout from \"@/components/Layout\";\nimport ValorantCard from \"@/components/ValorantCard\";\n\nexport default function Rules() {\n  return (\n    <Layout>\n      <section className=\"py-20 bg-valorant-navy min-h-screen\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"font-teko text-5xl font-bold text-valorant-red mb-4\">TOURNAMENT RULES</h2>\n            <div className=\"h-1 w-24 bg-valorant-mint mx-auto mb-6\"></div>\n            <p className=\"text-xl opacity-90\">Official Spike Rush Cup 2.0 Regulations</p>\n          </div>\n          \n          <div className=\"max-w-4xl mx-auto\">\n            <ValorantCard>\n              <div className=\"grid md:grid-cols-2 gap-8\">\n                <div>\n                  <h3 className=\"font-teko text-2xl font-bold text-valorant-mint mb-4\">GENERAL RULES</h3>\n                  <ul className=\"space-y-3 text-valorant-off-white/90\">\n                    <li className=\"flex items-start\">\n                      <i className=\"fas fa-chevron-right text-valorant-red mr-3 mt-1\"></i>\n                      <span>Teams must consist of exactly 5 players</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <i className=\"fas fa-chevron-right text-valorant-red mr-3 mt-1\"></i>\n                      <span>All players must be registered on the platform</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <i className=\"fas fa-chevron-right text-valorant-red mr-3 mt-1\"></i>\n                      <span>Entry fee of ₹500 per team required</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <i className=\"fas fa-chevron-right text-valorant-red mr-3 mt-1\"></i>\n                      <span>Payment proof must be submitted</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <i className=\"fas fa-chevron-right text-valorant-red mr-3 mt-1\"></i>\n                      <span>Registration closes 24 hours before tournament</span>\n                    </li>\n                  </ul>\n                </div>\n                \n                <div>\n                  <h3 className=\"font-teko text-2xl font-bold text-valorant-mint mb-4\">GAMEPLAY RULES</h3>\n                  <ul className=\"space-y-3 text-valorant-off-white/90\">\n                    <li className=\"flex items-start\">\n                      <i className=\"fas fa-chevron-right text-valorant-red mr-3 mt-1\"></i>\n                      <span>Tournament Mode: Spike Rush</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <i className=\"fas fa-chevron-right text-valorant-red mr-3 mt-1\"></i>\n                      <span>Best of 3 format for all matches</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <i className=\"fas fa-chevron-right text-valorant-red mr-3 mt-1\"></i>\n                      <span>No agent restrictions apply</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <i className=\"fas fa-chevron-right text-valorant-red mr-3 mt-1\"></i>\n                      <span>Server: Mumbai (Asia)</span>\n                    </li>\n                    <li className=\"flex items-start\">\n                      <i className=\"fas fa-chevron-right text-valorant-red mr-3 mt-1\"></i>\n                      <span>Disconnections result in automatic loss</span>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n              \n              <div className=\"mt-8 p-6 bg-valorant-red/20 rounded-lg border border-valorant-red/30\">\n                <h4 className=\"font-teko text-xl font-bold text-valorant-red mb-2\">PRIZE POOL</h4>\n                <div className=\"grid grid-cols-3 gap-4 text-center\">\n                  <div>\n                    <div className=\"text-2xl font-bold text-valorant-mint\">₹25,000</div>\n                    <div className=\"text-sm\">1st Place</div>\n                  </div>\n                  <div>\n                    <div className=\"text-2xl font-bold text-valorant-mint\">₹15,000</div>\n                    <div className=\"text-sm\">2nd Place</div>\n                  </div>\n                  <div>\n                    <div className=\"text-2xl font-bold text-valorant-mint\">₹10,000</div>\n                    <div className=\"text-sm\">3rd Place</div>\n                  </div>\n                </div>\n              </div>\n            </ValorantCard>\n          </div>\n        </div>\n      </section>\n    </Layout>\n  );\n}\n","size_bytes":4717},"client/src/pages/Signup.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertUserSchema, type InsertUser } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport ValorantCard from \"@/components/ValorantCard\";\nimport GlitchText from \"@/components/GlitchText\";\nimport WebGLBackground from \"@/components/WebGLBackground\";\nimport WebGLGlitchEffect from \"@/components/WebGLGlitchEffect\";\n\nexport default function Signup() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  const [showGlitch, setShowGlitch] = useState(false);\n  \n  const form = useForm<InsertUser>({\n    resolver: zodResolver(insertUserSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      discordId: \"\",\n      password: \"\",\n    },\n  });\n\n  const signupMutation = useMutation({\n    mutationFn: (data: InsertUser) => apiRequest(\"POST\", \"/api/auth/signup\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Welcome to Nyxxus E-Sports!\",\n        description: \"Your account has been created successfully\",\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Signup failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertUser) => {\n    setShowGlitch(true);\n    signupMutation.mutate(data);\n    setTimeout(() => setShowGlitch(false), 3000);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-valorant-navy p-6\">\n      {/* Epic WebGL Background Effects */}\n      <WebGLBackground intensity={0.7} particleCount={2000} />\n      <WebGLGlitchEffect trigger={showGlitch} intensity={1.0} />\n      \n      {/* Background Effects */}\n      <div className=\"fixed inset-0 hexagon-pattern opacity-20 pointer-events-none\"></div>\n      <div className=\"fixed inset-0 bg-gradient-to-br from-valorant-navy/80 via-valorant-charcoal/80 to-valorant-navy/80 pointer-events-none\"></div>\n      \n      <div className=\"w-full max-w-md relative z-20\">\n        <ValorantCard className=\"text-center\">\n          <div className=\"mb-8\">\n            <div className=\"w-16 h-16 bg-valorant-red rounded-lg flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-user-plus text-white text-2xl\"></i>\n            </div>\n            <h1 className=\"font-teko text-4xl font-bold mb-2\">\n              <GlitchText text=\"JOIN THE FIGHT\" />\n            </h1>\n            <p className=\"text-valorant-mint\">Create your account</p>\n          </div>\n\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"space-y-2 text-left\">\n              <Label htmlFor=\"name\" className=\"text-valorant-mint font-bold\">FULL NAME</Label>\n              <Input\n                id=\"name\"\n                {...form.register(\"name\")}\n                className=\"bg-valorant-charcoal border-valorant-red/30 text-valorant-off-white focus:border-valorant-red\"\n                placeholder=\"Enter your full name\"\n                data-testid=\"input-name\"\n              />\n              {form.formState.errors.name && (\n                <p className=\"text-red-400 text-sm\">{form.formState.errors.name.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2 text-left\">\n              <Label htmlFor=\"email\" className=\"text-valorant-mint font-bold\">EMAIL</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                {...form.register(\"email\")}\n                className=\"bg-valorant-charcoal border-valorant-red/30 text-valorant-off-white focus:border-valorant-red\"\n                placeholder=\"Enter your email\"\n                data-testid=\"input-email\"\n              />\n              {form.formState.errors.email && (\n                <p className=\"text-red-400 text-sm\">{form.formState.errors.email.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2 text-left\">\n              <Label htmlFor=\"discordId\" className=\"text-valorant-mint font-bold\">DISCORD ID</Label>\n              <Input\n                id=\"discordId\"\n                {...form.register(\"discordId\")}\n                className=\"bg-valorant-charcoal border-valorant-red/30 text-valorant-off-white focus:border-valorant-red\"\n                placeholder=\"YourName#1234\"\n                data-testid=\"input-discord\"\n              />\n              {form.formState.errors.discordId && (\n                <p className=\"text-red-400 text-sm\">{form.formState.errors.discordId.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2 text-left\">\n              <Label htmlFor=\"password\" className=\"text-valorant-mint font-bold\">PASSWORD</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                {...form.register(\"password\")}\n                className=\"bg-valorant-charcoal border-valorant-red/30 text-valorant-off-white focus:border-valorant-red\"\n                placeholder=\"Create a password\"\n                data-testid=\"input-password\"\n              />\n              {form.formState.errors.password && (\n                <p className=\"text-red-400 text-sm\">{form.formState.errors.password.message}</p>\n              )}\n            </div>\n\n            <Button\n              type=\"submit\"\n              disabled={signupMutation.isPending}\n              className=\"w-full bg-valorant-red hover:bg-red-600 text-white font-bold py-3 rounded-lg transition-colors\"\n              data-testid=\"button-signup\"\n            >\n              {signupMutation.isPending ? (\n                <div className=\"flex items-center\">\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  CREATING ACCOUNT...\n                </div>\n              ) : (\n                <>\n                  <i className=\"fas fa-rocket mr-2\"></i>\n                  CREATE ACCOUNT\n                </>\n              )}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 pt-6 border-t border-valorant-red/20\">\n            <p className=\"text-valorant-off-white/70\">\n              Already have an account?{\" \"}\n              <Link href=\"/login\" className=\"text-valorant-mint hover:text-valorant-red transition-colors font-bold\">\n                Login\n              </Link>\n            </p>\n          </div>\n        </ValorantCard>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6920},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/admin/AdminLogin.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport ValorantCard from \"@/components/ValorantCard\";\nimport GlitchText from \"@/components/GlitchText\";\n\ninterface AdminLoginData {\n  username: string;\n  password: string;\n}\n\nexport default function AdminLogin() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  \n  const form = useForm<AdminLoginData>({\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: (data: AdminLoginData) => apiRequest(\"POST\", \"/api/admin/login\", data),\n    onSuccess: () => {\n      toast({\n        title: \"Admin access granted\",\n        description: \"Welcome to the control panel\",\n      });\n      setLocation(\"/admin/dashboard\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Access denied\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: AdminLoginData) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-valorant-navy p-6\">\n      {/* Background Effects */}\n      <div className=\"fixed inset-0 hexagon-pattern opacity-30 pointer-events-none\"></div>\n      <div className=\"fixed inset-0 bg-gradient-to-br from-valorant-navy via-valorant-charcoal to-valorant-navy pointer-events-none\"></div>\n      \n      <div className=\"w-full max-w-md relative z-10\">\n        <ValorantCard className=\"text-center\">\n          <div className=\"mb-8\">\n            <div className=\"w-16 h-16 bg-valorant-red rounded-lg flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-shield-alt text-white text-2xl\"></i>\n            </div>\n            <h1 className=\"font-teko text-4xl font-bold mb-2\">\n              <GlitchText text=\"ADMIN CONTROL\" />\n            </h1>\n            <p className=\"text-valorant-mint\">Nyxxus E-Sports</p>\n          </div>\n\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"space-y-2 text-left\">\n              <Label htmlFor=\"username\" className=\"text-valorant-mint font-bold\">USERNAME</Label>\n              <Input\n                id=\"username\"\n                {...form.register(\"username\")}\n                className=\"bg-valorant-charcoal border-valorant-red/30 text-valorant-off-white focus:border-valorant-red\"\n                placeholder=\"Enter admin username\"\n                data-testid=\"input-admin-username\"\n              />\n            </div>\n\n            <div className=\"space-y-2 text-left\">\n              <Label htmlFor=\"password\" className=\"text-valorant-mint font-bold\">PASSWORD</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                {...form.register(\"password\")}\n                className=\"bg-valorant-charcoal border-valorant-red/30 text-valorant-off-white focus:border-valorant-red\"\n                placeholder=\"Enter admin password\"\n                data-testid=\"input-admin-password\"\n              />\n            </div>\n\n            <Button\n              type=\"submit\"\n              disabled={loginMutation.isPending}\n              className=\"w-full bg-valorant-red hover:bg-red-600 text-white font-bold py-3 rounded-lg transition-colors\"\n              data-testid=\"button-admin-login\"\n            >\n              {loginMutation.isPending ? (\n                <div className=\"flex items-center\">\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  ACCESSING...\n                </div>\n              ) : (\n                <>\n                  <i className=\"fas fa-key mr-2\"></i>\n                  ACCESS CONTROL PANEL\n                </>\n              )}\n            </Button>\n          </form>\n        </ValorantCard>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4223},"client/src/pages/admin/Dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport ValorantCard from \"@/components/ValorantCard\";\nimport type { TeamWithUser } from \"@shared/schema\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedTeam, setSelectedTeam] = useState<TeamWithUser | null>(null);\n  const [rejectionReason, setRejectionReason] = useState(\"\");\n  \n  const { data: teamsData } = useQuery({\n    queryKey: [\"/api/admin/teams\"],\n  });\n\n  const { data: registrationStatus } = useQuery({\n    queryKey: [\"/api/settings/registration-open\"],\n  });\n\n  const teams = teamsData?.teams || [];\n\n  const filteredTeams = teams.filter((team: TeamWithUser) =>\n    team.teamName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    team.leader.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const toggleRegistrationMutation = useMutation({\n    mutationFn: (registrationOpen: boolean) => \n      apiRequest(\"POST\", \"/api/admin/settings/registration-toggle\", { registrationOpen }),\n    onSuccess: (_, registrationOpen) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings/registration-open\"] });\n      toast({\n        title: `Registration ${registrationOpen ? \"opened\" : \"closed\"}`,\n        description: `Tournament registration is now ${registrationOpen ? \"open\" : \"closed\"}`,\n      });\n    },\n  });\n\n  const approveTeamMutation = useMutation({\n    mutationFn: (teamId: number) => \n      apiRequest(\"POST\", `/api/admin/teams/${teamId}/approve`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/teams\"] });\n      toast({\n        title: \"Team approved\",\n        description: \"The team has been approved successfully\",\n      });\n    },\n  });\n\n  const rejectTeamMutation = useMutation({\n    mutationFn: ({ teamId, reason }: { teamId: number; reason: string }) => \n      apiRequest(\"POST\", `/api/admin/teams/${teamId}/reject`, { reason }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/teams\"] });\n      setRejectionReason(\"\");\n      toast({\n        title: \"Team rejected\",\n        description: \"The team has been rejected\",\n      });\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return \"status-approved\";\n      case \"rejected\":\n        return \"status-rejected\";\n      default:\n        return \"status-pending\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-valorant-navy p-6\">\n      {/* Background Effects */}\n      <div className=\"fixed inset-0 hexagon-pattern opacity-30 pointer-events-none\"></div>\n      <div className=\"fixed inset-0 bg-gradient-to-br from-valorant-navy via-valorant-charcoal to-valorant-navy pointer-events-none\"></div>\n      \n      <div className=\"container mx-auto relative z-10\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"font-teko text-5xl font-bold text-valorant-red mb-4\">ADMIN CONTROL PANEL</h2>\n          <div className=\"h-1 w-24 bg-valorant-mint mx-auto mb-6\"></div>\n          <p className=\"text-xl opacity-90\">Nyxxus E-Sports Tournament Management</p>\n        </div>\n        \n        <div className=\"max-w-6xl mx-auto\">\n          {/* Admin Controls */}\n          <ValorantCard className=\"mb-8\">\n            <div className=\"flex flex-col md:flex-row justify-between items-center\">\n              <div>\n                <h3 className=\"font-teko text-2xl font-bold text-valorant-mint\">REGISTRATION STATUS</h3>\n                <p className=\"text-valorant-off-white/70\">Control tournament registration</p>\n              </div>\n              <div className=\"flex items-center space-x-4 mt-4 md:mt-0\">\n                <span className=\"text-sm\">Registration:</span>\n                <Button\n                  onClick={() => toggleRegistrationMutation.mutate(!registrationStatus?.registrationOpen)}\n                  disabled={toggleRegistrationMutation.isPending}\n                  className={`relative w-14 h-8 rounded-full transition-colors ${\n                    registrationStatus?.registrationOpen ? 'bg-valorant-mint' : 'bg-gray-600'\n                  }`}\n                  data-testid=\"button-toggle-registration\"\n                >\n                  <div className={`absolute top-1 left-1 w-6 h-6 bg-white rounded-full transition-transform ${\n                    registrationStatus?.registrationOpen ? 'translate-x-6' : 'translate-x-0'\n                  }`}></div>\n                </Button>\n                <span className={`font-bold ${registrationStatus?.registrationOpen ? 'text-valorant-mint' : 'text-gray-400'}`}>\n                  {registrationStatus?.registrationOpen ? 'OPEN' : 'CLOSED'}\n                </span>\n              </div>\n            </div>\n          </ValorantCard>\n          \n          {/* Teams Table */}\n          <ValorantCard className=\"overflow-hidden\">\n            <div className=\"p-6 border-b border-valorant-red/20\">\n              <div className=\"flex flex-col md:flex-row justify-between items-center\">\n                <h3 className=\"font-teko text-2xl font-bold text-valorant-mint mb-4 md:mb-0\">REGISTERED TEAMS</h3>\n                <div className=\"relative\">\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Search teams...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"bg-valorant-navy border border-valorant-red/30 rounded-lg px-4 py-2 pl-10 text-white focus:border-valorant-red focus:outline-none w-64\"\n                    data-testid=\"input-search-teams\"\n                  />\n                  <i className=\"fas fa-search absolute left-3 top-3 text-valorant-mint\"></i>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-valorant-navy/50\">\n                  <tr>\n                    <th className=\"text-left p-4 font-teko text-valorant-mint\">ID</th>\n                    <th className=\"text-left p-4 font-teko text-valorant-mint\">TEAM NAME</th>\n                    <th className=\"text-left p-4 font-teko text-valorant-mint\">LEADER</th>\n                    <th className=\"text-left p-4 font-teko text-valorant-mint\">MEMBERS</th>\n                    <th className=\"text-left p-4 font-teko text-valorant-mint\">STATUS</th>\n                    <th className=\"text-left p-4 font-teko text-valorant-mint\">PAYMENT</th>\n                    <th className=\"text-left p-4 font-teko text-valorant-mint\">ACTIONS</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredTeams.length === 0 ? (\n                    <tr>\n                      <td colSpan={7} className=\"p-8 text-center text-valorant-off-white/70\">\n                        No teams found\n                      </td>\n                    </tr>\n                  ) : (\n                    filteredTeams.map((team: TeamWithUser) => (\n                      <tr \n                        key={team.id} \n                        className=\"border-b border-valorant-red/10 hover:bg-valorant-navy/30 transition-colors\"\n                        data-testid={`row-team-${team.id}`}\n                      >\n                        <td className=\"p-4\">#{team.id.toString().padStart(3, '0')}</td>\n                        <td className=\"p-4 font-bold\" data-testid={`text-team-name-${team.id}`}>\n                          {team.teamName}\n                        </td>\n                        <td className=\"p-4\">\n                          <div>\n                            <div className=\"font-medium\" data-testid={`text-leader-name-${team.id}`}>\n                              {team.leader.name}\n                            </div>\n                            <div className=\"text-xs text-valorant-mint\" data-testid={`text-leader-email-${team.id}`}>\n                              {team.leader.email}\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"p-4\" data-testid={`text-members-count-${team.id}`}>\n                          {team.members.length}/5\n                        </td>\n                        <td className=\"p-4\">\n                          <span \n                            className={`${getStatusColor(team.status)} px-2 py-1 rounded text-xs font-bold`}\n                            data-testid={`text-team-status-${team.id}`}\n                          >\n                            {team.status.toUpperCase()}\n                          </span>\n                        </td>\n                        <td className=\"p-4\">\n                          {team.paymentProofPath ? (\n                            <Dialog>\n                              <DialogTrigger asChild>\n                                <Button\n                                  className=\"w-8 h-8 bg-valorant-mint rounded flex items-center justify-center hover:bg-green-400 transition-colors p-0\"\n                                  data-testid={`button-view-payment-${team.id}`}\n                                >\n                                  <i className=\"fas fa-eye text-valorant-navy\"></i>\n                                </Button>\n                              </DialogTrigger>\n                              <DialogContent className=\"bg-valorant-charcoal border-valorant-red/30\">\n                                <DialogHeader>\n                                  <DialogTitle className=\"text-valorant-mint\">Payment Proof</DialogTitle>\n                                </DialogHeader>\n                                <div className=\"flex justify-center\">\n                                  <img \n                                    src={`/uploads/${team.paymentProofPath}`} \n                                    alt=\"Payment Proof\" \n                                    className=\"max-w-full max-h-96 object-contain rounded\"\n                                  />\n                                </div>\n                              </DialogContent>\n                            </Dialog>\n                          ) : (\n                            <span className=\"text-valorant-off-white/50\">No proof</span>\n                          )}\n                        </td>\n                        <td className=\"p-4\">\n                          {team.status === \"pending\" ? (\n                            <div className=\"flex space-x-2\">\n                              <Button\n                                onClick={() => approveTeamMutation.mutate(team.id)}\n                                disabled={approveTeamMutation.isPending}\n                                className=\"px-3 py-1 bg-green-600 rounded text-xs font-bold hover:bg-green-500 transition-colors\"\n                                data-testid={`button-approve-${team.id}`}\n                              >\n                                APPROVE\n                              </Button>\n                              <Dialog>\n                                <DialogTrigger asChild>\n                                  <Button\n                                    onClick={() => setSelectedTeam(team)}\n                                    className=\"px-3 py-1 bg-red-600 rounded text-xs font-bold hover:bg-red-500 transition-colors\"\n                                    data-testid={`button-reject-${team.id}`}\n                                  >\n                                    REJECT\n                                  </Button>\n                                </DialogTrigger>\n                                <DialogContent className=\"bg-valorant-charcoal border-valorant-red/30\">\n                                  <DialogHeader>\n                                    <DialogTitle className=\"text-valorant-mint\">Reject Team</DialogTitle>\n                                  </DialogHeader>\n                                  <div className=\"space-y-4\">\n                                    <p className=\"text-valorant-off-white\">\n                                      Are you sure you want to reject \"{selectedTeam?.teamName}\"?\n                                    </p>\n                                    <Textarea\n                                      placeholder=\"Reason for rejection (optional)\"\n                                      value={rejectionReason}\n                                      onChange={(e) => setRejectionReason(e.target.value)}\n                                      className=\"bg-valorant-navy border-valorant-red/30 text-valorant-off-white\"\n                                      data-testid=\"input-rejection-reason\"\n                                    />\n                                    <div className=\"flex gap-2 justify-end\">\n                                      <Button\n                                        onClick={() => {\n                                          if (selectedTeam) {\n                                            rejectTeamMutation.mutate({ \n                                              teamId: selectedTeam.id, \n                                              reason: rejectionReason \n                                            });\n                                          }\n                                        }}\n                                        disabled={rejectTeamMutation.isPending}\n                                        className=\"bg-red-600 hover:bg-red-500\"\n                                        data-testid=\"button-confirm-reject\"\n                                      >\n                                        CONFIRM REJECT\n                                      </Button>\n                                    </div>\n                                  </div>\n                                </DialogContent>\n                              </Dialog>\n                            </div>\n                          ) : (\n                            <span className=\"px-3 py-1 bg-gray-600 rounded text-xs font-bold\">\n                              {team.status.toUpperCase()}\n                            </span>\n                          )}\n                        </td>\n                      </tr>\n                    ))\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </ValorantCard>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14797}},"version":1}